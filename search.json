[{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement mritchie@wehi.edu.au. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing Guidelines","title":"Contributing Guidelines","text":"Pull requests, bug reports, forms contribution welcomed highly encouraged! :octocat: guide serves set clear expectations everyone involved project can improve together also creating welcoming space everyone participate. Following guidelines help ensure positive experience contributors maintainers.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing Guidelines","text":"Please review Code Conduct. effect times. expect honored everyone contributes project. Acting like asshole tolerated.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"asking-questions","dir":"","previous_headings":"","what":"Asking Questions","title":"Contributing Guidelines","text":"use GitHub support forum. , allow anyone else question find answer. Please seek support following ways: Read documentation guides project see can figure . example project, explore learn works see can answer question. Search similar questions github issues quickest way debug issues specific. Feel free comment existing issue find relavant. Open new github issues, similar question asked, may open issue GitHub ask help. creating issue, check using latest version project. --date, see updating fixes issue first. creating issue, please clearly explain trying , list already attempted solve problem. Provide code samples, attach entire project someone else debug.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"bug-reports-and-other-issues","dir":"","previous_headings":"Asking Questions","what":"Bug Reports and Other Issues","title":"Contributing Guidelines","text":"great way contribute project send detailed issue encounter problem. always appreciate well-written, thorough bug report. open duplicate issue! Search existing issues see issue previously reported. issue exists, comment additional information . may simply note “problem ”, helps prioritize common problems requests. Prefer using reactions, comments, simply want “+1” existing issue. Use GitHub-flavored Markdown. Especially put code blocks console outputs backticks (```). improves readability.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"feature-requests","dir":"","previous_headings":"","what":"Feature Requests","title":"Contributing Guidelines","text":"Feature requests welcome! consider requests, guarantee request accepted. want avoid feature creep. idea may great, also --scope project. accepted, make commitments regarding timeline implementation release. However, welcome submit pull request help! open duplicate feature request. Search existing feature requests first. find feature (one similar) previously requested, comment issue. Fully complete provided issue template. feature request template asks necessary information us begin productive conversation. precise proposed outcome feature relates existing features. Include implementation details possible.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"triaging-issues","dir":"","previous_headings":"","what":"Triaging Issues","title":"Contributing Guidelines","text":"can triage issues may include reproducing bug reports asking additional information, version numbers reproduction instructions. help can provide quickly resolve issue much appreciated!","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"submitting-pull-requests","dir":"","previous_headings":"","what":"Submitting Pull Requests","title":"Contributing Guidelines","text":"love pull requests! forking repo creating pull request non-trivial changes, usually best first open issue discuss changes, discuss intended approach solving problem comments existing issue. Note: contributions licensed project’s license. Smaller better. Submit one pull request per bug fix feature. pull request contain isolated changes pertaining single bug fix feature implementation. refactor reformat code unrelated change. better submit many small pull requests rather single large one. Enormous pull requests take enormous amounts time review, may rejected altogether. Coordinate bigger changes. large non-trivial changes, open issue discuss strategy maintainers. Otherwise, risk lot work nothing! Prioritize understanding cleverness. Write code clearly concisely. Remember source code usually gets written read often. Ensure code clear reader. purpose logic obvious reasonably skilled developer, otherwise add comment explains . Follow existing coding style conventions. Keep code consistent style, formatting, conventions rest code base. possible, enforced linter. Consistency makes easier review modify future. Include test coverage. Add unit tests UI tests possible. Follow existing patterns implementing tests. Update example project one exists exercise new functionality added. Add documentation. Document changes code doc comments existing guides. Use repo’s default branch. Branch submit pull request repo’s default branch. Resolve merge conflicts occur. Promptly address CI failures. pull request fails build pass tests, please push another commit fix . writing comments, use properly constructed sentences, including punctuation. Use spaces, tabs.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"writing-commit-messages","dir":"","previous_headings":"","what":"Writing Commit Messages","title":"Contributing Guidelines","text":"Please write great commit message. Separate subject body blank line Limit subject line 50 characters Capitalize subject line end subject line period Use imperative mood subject line (example: “Fix networking issue”) Wrap body 72 characters Use body explain , (code shows !) applicable, prefix title relevant component name. (examples: “[Docs] Fix typo”, “[Profile] Fix missing avatar”)","code":"[TAG] Short summary of changes in 50 chars or less  Add a more detailed explanation here, if necessary. Possibly give some background about the issue being fixed, etc. The body of the commit message can be several paragraphs. Further paragraphs come after blank lines and please do proper word-wrap.  Wrap it to about 72 characters or so. In some contexts, the first line is treated as the subject of the commit and the rest of the text as the body. The blank line separating the summary from the body is critical (unless you omit the body entirely); various tools like `log`, `shortlog` and `rebase` can get confused if you run the two together.  Explain the problem that this commit is solving. Focus on why you are making this change as opposed to how or what. The code explains how or what. Reviewers and your future self can read the patch, but might not understand why a particular solution was implemented. Are there side effects or other unintuitive consequences of this change? Here's the place to explain them.   - Bullet points are okay, too   - A hyphen or asterisk should be used for the bullet, preceded    by a single space, with blank lines in between  Note the fixed or relevant GitHub issues at the end:  Resolves: #123 See also: #456, #789"},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"code-review","dir":"","previous_headings":"","what":"Code Review","title":"Contributing Guidelines","text":"Review code, author. Look suggest improvements without disparaging insulting author. Provide actionable feedback explain reasoning. code. code critiqued, questioned, constructively criticized, remember code. take code review personally. Always best. one writes bugs purpose. best, learn mistakes. Kindly note violations guidelines specified document.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"coding-style","dir":"","previous_headings":"","what":"Coding Style","title":"Contributing Guidelines","text":"Consistency important. Following existing style, formatting, naming conventions file modifying overall project. Failure result prolonged review process focus updating superficial aspects code, rather improving functionality performance. example, private properties prefixed underscore _, new ones add prefixed way. , methods named using camelcase, like thisIsMyNewMethod, diverge writing this_is_my_new_method. get idea. doubt, please ask search codebase something similar. possible, style format enforced linter.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"certificate-of-origin","dir":"","previous_headings":"","what":"Certificate of Origin","title":"Contributing Guidelines","text":"Developer’s Certificate Origin 1.1 making contribution project, certify : contribution created whole part right submit open source license indicated file; contribution based upon previous work , best knowledge, covered appropriate open source license right license submit work modifications, whether created whole part , open source license (unless permitted submit different license), indicated file; contribution provided directly person certified (1), (2) (3) modified . understand agree project contribution public record contribution (including personal information submit , including sign-) maintained indefinitely may redistributed consistent project open source license(s) involved.","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"no-brown-mms","dir":"","previous_headings":"","what":"No Brown M&M’s","title":"Contributing Guidelines","text":"reading , bravo dear user (hopefully) contributor making far! awesome. 💯 confirm read guide following best possible, include emoji top issue pull request: 🖤 :black_heart:","code":""},{"path":"https://mritchielab.github.io/FLAMES/CONTRIBUTING.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Contributing Guidelines","text":"document modified @jessesquires. Please feel free adopt guide projects. Fork wholesale remix needs.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://mritchielab.github.io/FLAMES/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames","dir":"Articles","previous_headings":"","what":"FLAMES","title":"FLAMES","text":"FLAMES package provides framework performing single-cell bulk read full-length analysis mutations splicing. FLAMES performs cell barcode UMI assignment nanopore reads well semi-supervised isoform detection quantification. FLAMES designed easy quick use, powerful workflow isoform detection quantification, splicing analysis mutation detection, seeks overcome limitations tools, inability process single cell data, focus cell barcode UMI assignment (Tian et al. 2020). R package represents enhanced iteration FLAMES Python module originally designed support research work presented Comprehensive characterization single-cell full-length isoforms human mouse long-read sequencing Tian et al (2020). upgraded R version simplifies installation execution processes also incorporates additional functionality, streamlining analysis single-cell full-length isoforms using long-read sequencing data. processing single cell data, FLAMES can run data generated long-read platform without matched short-read sequencing data. long reads available, FLAMES takes input long reads fastq files. blaze() function called demultiplex long reads cell-specific fastq files. short-read data unavailable, FLAMES incorporates BLAZE blaze() function identify cell barcodes solely long reads (et al. 2023). blaze() function called locate barcode sequencing long-reads, identify barcode allow-list directly long reads, assign reads cells (.e., demultiplexing) trims cell barcodes flanking UMI sequence. matched short-read single-cell RNA sequencing data available, FLAMES take cell barcode allow-list generated short reads addition long-read fastq files. short-read allow-list used reference guide demultiplexing long reads. , FLAMES incorporates flexiplex find_barcode() function perform demultiplexing (Davidson et al. 2023). find_barcode() function called extract cell barcode UMI sequence long reads, using allow-list reference. demultiplexing, pipeline calls minimap_align(), minimap2 wrapper, align demultiplex long-reads reference genome. quantify_gene() called deduplicate reads unique molecular identifiers (UMIs) generate gene-level UMI counts. Note UMI deduplication, pipeline keeps longest reads among UMI downstream steps. Next, find_isoform() called identify novel isoforms using alignment, creating updated transcript assembly. step, users may choose use bambu, designed transcript discovery quantification using long read RNA-Seq data (Chen et al. 2023). Otherwise, users use build-isoform identification methods FLAMES. methods wrapped find_isoform() function. Afterwards, demultiplexed reads aligned transcript assembly function minimap_realign(). Finally, FLAMES calls quantify_transcript() quantify transcript counts using (re-)alignment file. Figure @ref(fig:workflow) summerise steps pipeline described . pipeline functions (sc_long_pipeline, bulk_long_pipeline, sc_long_multisample_pipline) execute steps sequentially return SingleCellExperiment object, SummarizedExperiment object list SingleCellExperiment objects respectivly. read alignment realignment, FLAMES uses minimap2, versatile alignment program aligning sequences reference database (Li 2018). software needs downloaded prior using FLAMES pipeline, can found https://github.com/lh3/minimap2.","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-pipeline-execution","dir":"Articles","previous_headings":"","what":"FLAMES Pipeline Execution","title":"FLAMES","text":"vignette detail process running FLAMES pipeline. details execution single cell pipeline (sc_long_pipeline()) bulk data pipeline (bulk_long_pipeline()).","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"environment-setup","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > FLAMES Single Cell Pipeline","what":"Environment setup","title":"FLAMES","text":"get started, pipeline needs access gene annotation file GFF3 GTF format, directory containing one FASTQ files (merged pre-processing), genome FASTA file, well file path minimap2, file path directory hold output files. single cell pipeline can demultiplex input data running, required. can disabled setting do_barcode_demultiplex argument config file FALSE calling pipeline. example dataset already demultiplexed. example, required files downloaded GitHub using BiocFileCache (Shepherd Morgan 2021). optional argument config_file can given bulk_long_pipeline() sc_long_pipeline() order customise execution pipelines. expected JSON file, example can found calling FLAMES::create_config, returns path copy default JSON configuration file. values default configs can altered either editing JSON file manually, passing additional arguments FLAMES::create_config, example, FLAMES::create_config(outdir, type = \"sc_3end\", min_sup_cnt = 10) create copy default config 10X 3’ end nanopore single cell reads, min_sup_cnt value (minimal number supporting reads novel isoform pass filtering) changed 10. vignette uses default configuration file created SIRV reads.","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE)  file_url <-   \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\"  annot <- bfc[[names(BiocFileCache::bfcadd(   bfc, \"Annotation\",   file.path(file_url, \"gencodeshortened.gtf\") ))]]  genome_fa <- bfc[[names(BiocFileCache::bfcadd(   bfc,   \"Genomefa\",   file.path(file_url, \"GRCh38shortened.fa\") ))]]  fastq <- bfc[[names(BiocFileCache::bfcadd(   bfc, \"Fastq\", file.path(file_url, \"sc_align2genome.sample.fastq.gz\")))]]  # setup other environment variables outdir <- tempfile() dir.create(outdir) config_file <- FLAMES::create_config(outdir, type = \"SIRV\", do_barcode_demultiplex = TRUE) #> Registered S3 method overwritten by 'GGally': #>   method from    #>   +.gg   ggplot2 #> Writing configuration parameters to:  /tmp/RtmpzNIsuH/file26b9187149d8/config_file_9913.json"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-execution","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > FLAMES Single Cell Pipeline","what":"FLAMES execution","title":"FLAMES","text":"initial variables setup, pipeline can run using: , however, input fastq files need demultiplexed, reference_csv argument need specified - reference_csv file path cell barcode allow-list, text file one barcode per line. filtered_feature_bc_matrix/barcodes.tsv.gz cellranger outputs can used create allow-list, zcat barcodes.tsv.gz | cut -f1 -d'-' > allow-list.csv. pipeline can alse run calling consituent steps sequentially:","code":"library(FLAMES) # do not run if minimap2 cannot be found if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   sce <- sc_long_pipeline(     annotation = annot, fastq = fastq, genome_fa = genome_fa,     outdir = outdir, config_file = config_file, expect_cell_number = 10) } library(FLAMES) # do not run if minimap2 cannot be found if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   config <- jsonlite::fromJSON(config_file)   # find_barcode(...)   genome_bam <- rownames(minimap2_align(     config = config, fa_file = genome_fa, fq_in = fastq, annot = annot,     outdir = outdir   ))   find_isoform(     annotation = annot, genome_fa = genome_fa,     genome_bam = genome_bam, outdir = outdir, config = config   )   minimap2_realign(     config = config, fq_in = fastq,     outdir = outdir   )   quantify_transcript(annotation = annot, outdir = outdir, config = config)   sce <- create_sce_from_dir(outdir = outdir, annotation = annot) }"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"visulisation","dir":"Articles","previous_headings":"FLAMES Pipeline Execution","what":"Visulisation","title":"FLAMES","text":"plot_isoform_reduced_dim() function can used visualise isoform expression reduced dimensions. function takes SingleCellExperiment object either gene ID vector transcript IDs input. SingleCellExperiment object contains gene counts transcript counts stored “transcript” altExp slot, function use reduced dimensions gene counts plot transcript expression values.","code":"library(FLAMES) library(SingleCellExperiment)  # just the transcript counts scmixology_lib10_transcripts |>   scuttle::logNormCounts() |>   scater::runPCA() |>   scater::runUMAP() |>   plot_isoform_reduced_dim('ENSG00000108107') # SCE with gene counts as main assay and transcript counts as altExp scmixology_lib10 <- scmixology_lib10[, colSums(counts(scmixology_lib10)) > 0] sce_lr <- scmixology_lib10[, colnames(scmixology_lib10) %in% colnames(scmixology_lib10_transcripts)] altExp(sce_lr, \"transcript\") <- scmixology_lib10_transcripts[, colnames(sce_lr)] sce_lr |>   scuttle::logNormCounts() |>   scater::runPCA() |>   scater::runUMAP() |>   plot_isoform_reduced_dim('ENSG00000108107')"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"imputation","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > Visulisation","what":"Imputation","title":"FLAMES","text":"experiments long-read preformed subsample cells short-reads preformed full sample, combine_sce() function can used combine SingleCellExperiment objects two samples. first argument subsample main assay gene counts transcript counts saved “transcript” altExp slot. second argument sample gene counts. function returns SingleCellExperiment object main assay containing combined gene counts “transcript” altExp slot, cells missing long-read data NA values. sc_impute_transcript() function can used impute missing transcript counts using gene counts. plot_isoform_reduced_dim() function can handle SingleCellExperiment object combined gene transcript counts, without imputed values, NA values plotted grey.","code":"combined_sce <- combine_sce(sce_lr, scmixology_lib90) combined_sce <- combined_sce |>   scuttle::logNormCounts() |>   scater::runPCA() |>   scater::runUMAP() # plot without imputation plot_isoform_reduced_dim(combined_sce, 'ENSG00000108107') # impute missing transcript counts combined_sce_impute <- sc_impute_transcript(combined_sce) #> Imputing transcript counts ... plot_isoform_reduced_dim(combined_sce_impute, 'ENSG00000108107')"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-termination","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > Visulisation","what":"FLAMES termination","title":"FLAMES","text":"directory outdir now contains several output files returned pipeline. output files generated pipeline : transcript_count.csv.gz - transcript count matrix (also contained output SummarizedExperiment SingleCellExperiment) isoform_annotated.filtered.gff3 - found isoform information gff3 format transcript_assembly.fa - transcript sequence isoforms align2genome.bam sorted BAM file reads aligned genome (intermediate FLAMES step) realign2transcript.bam - sorted realigned BAM file using transcript_assembly.fa reference (intermediate FLAMES step) tss_tes.bedgraph- TSS TES enrichment reads (QC) pipeline also returns SummarizedExperiment SingleCellExperiment object, depending pipeline run, containing data transcript_count.csv.gzand isoform_annotated.filtered.gff3 (Amezquita et al. 2020) (Morgan et al. 2020). SummarizedExperiment (SingleCellExperiment) object contains data present outdir directory, given simplify process reading transcript count matrix annotation data back R, analysis.","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-bulk-pipeline","dir":"Articles","previous_headings":"FLAMES Pipeline Execution","what":"FLAMES Bulk Pipeline","title":"FLAMES","text":"basic example execution FLAMES bulk pipeline given . process essentially identical example single cell data.","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"environment-setup-1","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > FLAMES Bulk Pipeline","what":"Environment setup","title":"FLAMES","text":"get started, pipeline needs access gene annotation file GFF3 GTF format, directory containing one FASTQ files (merged pre-processing), genome FASTA file, well file path minimap2, file path directory hold output files. example, files downloaded GitHub using BiocFileCache (Shepherd Morgan 2021).","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE)  file_url <-   \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\"  annot <- bfc[[names(BiocFileCache::bfcadd(   bfc, \"Annotation\",   file.path(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\") ))]]  genome_fa <- bfc[[names(BiocFileCache::bfcadd(   bfc, \"Genomefa\",   file.path(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\") ))]]  # download the two fastq files, move them to a folder to be merged together fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\",                  file.path(file_url, \"fastq\", \"sample1.fastq.gz\")))]] fastq2 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq2\",                 file.path(file_url, \"fastq\", \"sample2.fastq.gz\")))]]  # the downloaded fastq files need to be in a directory to be merged together fastq_dir <- file.path(temp_path, \"fastq_dir\")  dir.create(fastq_dir) file.copy(c(fastq1, fastq2), fastq_dir) #> [1] TRUE TRUE unlink(c(fastq1, fastq2)) # the original files can be deleted  # setup other environment variables outdir <- tempfile() dir.create(outdir) config_file <- FLAMES::create_config(outdir) #> Writing configuration parameters to:  /tmp/RtmpzNIsuH/file26b93c727235/config_file_9913.json"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-execution-1","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > FLAMES Bulk Pipeline","what":"FLAMES execution","title":"FLAMES","text":"environment setup, pipeline can executed running:","code":"library(FLAMES) if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   summarizedExperiment <- bulk_long_pipeline(     annot = annot, fastq = fastq_dir, outdir = outdir,     genome_fa = genome_fa, config_file = config_file   ) }"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-termination-1","dir":"Articles","previous_headings":"FLAMES Pipeline Execution > FLAMES Bulk Pipeline","what":"FLAMES termination","title":"FLAMES","text":"bulk pipeline completed, output directory contains files single cell pipeline produces. bulk_long_pipeline also returns SummarizedExperiment object, containing data SingleCellExperiment (Amezquita et al. 2020) (Morgan et al. 2020).","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"running-with-slurm","dir":"Articles","previous_headings":"FLAMES Pipeline Execution","what":"Running with Slurm","title":"FLAMES","text":"Since barcode demultiplexing step, isoform identification step quantification step currently single threaded, job scheduler (Slurm) users may want allocate different resources step. can achieved calling individual functions (find_isoform, minimap2_realign etc.) sequentially, changing configuration file. Bash script demonstrates can done single R script calling pipeline function. Bash script can executed inside tmux screen session :","code":"#!/bin/bash -x  # set all steps to false sed -i '/\"do_/s/true/false/' config_sclr_nanopore_3end.json  # set do_genome_alignment to true sed -i '/do_genome_alignment/s/false/true/' \\         config_sclr_nanopore_3end.json  srun -c 20 --mem 64GB \\         Rscript flames_pipeline.R && \\  sed -i '/\"do_/s/true/false/' \\         config_sclr_nanopore_3end.json && \\ sed -i '/do_isoform_identification/s/false/true/' \\         config_sclr_nanopore_3end.json && \\ srun -c 1 --mem 64GB --ntasks=1 \\         Rscript flames_pipeline.R  && \\  sed -i '/\"do_/s/true/false/' \\         config_sclr_nanopore_3end.json && \\ sed -i '/do_read_realignment/s/false/true/' \\         config_sclr_nanopore_3end.json && \\ srun -c 20 --mem 64GB --ntasks=1 \\         Rscript flames_pipeline.R && \\  sed -i '/\"do_/s/true/false/' \\         config_sclr_nanopore_3end.json && \\ sed -i '/do_transcript_quantification/s/false/true/' \\         config_sclr_nanopore_3end.json && \\ srun -c 1 --mem 64GB --ntasks=1 \\         Rscript flames_pipeline.R && \\  echo \"Pipeline finished\" ./flames.sh | tee -a bash.log; tail bash.log \\         | mail -s \"flames pipeline ended\" user@example.com"},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"flames-on-windows","dir":"Articles","previous_headings":"FLAMES Pipeline Execution","what":"FLAMES on Windows","title":"FLAMES","text":"Due FLAMES requiring minimap2 pysam, FLAMES currently unavaliable Windows.","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"citation","dir":"Articles","previous_headings":"FLAMES Pipeline Execution","what":"Citation","title":"FLAMES","text":"Please cite flames’s paper use flames research. FLAMES used incorporates BLAZE, flexiplex minimap2, samtools, bambu. Please make sure cite using tools.","code":""},{"path":"https://mritchielab.github.io/FLAMES/articles/FLAMES_vignette.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"FLAMES","text":"","code":"#> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.27.2 SummarizedExperiment_1.35.4 #>  [3] Biobase_2.65.1              GenomicRanges_1.57.2        #>  [5] GenomeInfoDb_1.41.2         IRanges_2.39.2              #>  [7] S4Vectors_0.43.2            BiocGenerics_0.51.3         #>  [9] MatrixGenerics_1.17.0       matrixStats_1.4.1           #> [11] FLAMES_1.11.3               BiocStyle_2.33.1            #>  #> loaded via a namespace (and not attached): #>   [1] fs_1.6.4                  ProtGenerics_1.37.1       #>   [3] bitops_1.0-9              httr_1.4.7                #>   [5] RColorBrewer_1.1-3        doParallel_1.0.17         #>   [7] tools_4.4.1               backports_1.5.0           #>   [9] utf8_1.2.4                R6_2.5.1                  #>  [11] HDF5Array_1.33.8          lazyeval_0.2.2            #>  [13] uwot_0.2.2                rhdf5filters_1.17.0       #>  [15] GetoptLong_1.0.5          withr_3.0.1               #>  [17] prettyunits_1.2.0         GGally_2.2.1              #>  [19] gridExtra_2.3             cli_3.6.3                 #>  [21] textshaping_0.4.0         labeling_0.4.3            #>  [23] ggbio_1.53.0              sass_0.4.9                #>  [25] readr_2.1.5               pkgdown_2.1.1.9000        #>  [27] Rsamtools_2.21.2          systemfonts_1.1.0         #>  [29] txdbmaker_1.1.1           foreign_0.8-87            #>  [31] R.utils_2.12.3            dichromat_2.0-0.1         #>  [33] scater_1.33.4             parallelly_1.38.0         #>  [35] BSgenome_1.73.1           limma_3.61.12             #>  [37] rstudioapi_0.16.0         RSQLite_2.3.7             #>  [39] FNN_1.1.4.1               generics_0.1.3            #>  [41] shape_1.4.6.1             BiocIO_1.15.2             #>  [43] dplyr_1.1.4               Matrix_1.7-0              #>  [45] ggbeeswarm_0.7.2          fansi_1.0.6               #>  [47] abind_1.4-8               R.methodsS3_1.8.2         #>  [49] lifecycle_1.0.4           yaml_2.3.10               #>  [51] edgeR_4.3.19              rhdf5_2.49.0              #>  [53] SparseArray_1.5.44        BiocFileCache_2.13.2      #>  [55] grid_4.4.1                blob_1.2.4                #>  [57] dqrng_0.4.1               crayon_1.5.3              #>  [59] dir.expiry_1.13.0         lattice_0.22-6            #>  [61] beachmat_2.21.6           cowplot_1.1.3             #>  [63] GenomicFeatures_1.57.1    KEGGREST_1.45.1           #>  [65] pillar_1.9.0              knitr_1.48                #>  [67] ComplexHeatmap_2.21.1     metapod_1.13.0            #>  [69] bambu_3.7.0               rjson_0.2.23              #>  [71] xgboost_1.7.8.1           codetools_0.2-20          #>  [73] glue_1.8.0                data.table_1.16.2         #>  [75] vctrs_0.6.5               png_0.1-8                 #>  [77] gtable_0.3.5              cachem_1.1.0              #>  [79] xfun_0.48                 S4Arrays_1.5.11           #>  [81] DropletUtils_1.25.2       iterators_1.0.14          #>  [83] statmod_1.5.0             bluster_1.15.1            #>  [85] bit64_4.5.2               progress_1.2.3            #>  [87] filelock_1.0.3            bslib_0.8.0               #>  [89] irlba_2.3.5.1             vipor_0.4.7               #>  [91] rpart_4.1.23              colorspace_2.1-1          #>  [93] DBI_1.2.3                 Hmisc_5.1-3               #>  [95] nnet_7.3-19               tidyselect_1.2.1          #>  [97] bit_4.5.0                 compiler_4.4.1            #>  [99] curl_5.2.3                httr2_1.0.5               #> [101] graph_1.83.0              htmlTable_2.4.3           #> [103] BiocNeighbors_1.99.2      basilisk.utils_1.17.3     #> [105] xml2_1.3.6                desc_1.4.3                #> [107] DelayedArray_0.31.14      bookdown_0.40             #> [109] rtracklayer_1.65.0        checkmate_2.3.2           #> [111] scales_1.3.0              RBGL_1.81.0               #> [113] rappdirs_0.3.3            stringr_1.5.1             #> [115] digest_0.6.37             rmarkdown_2.28            #> [117] basilisk_1.17.2           XVector_0.45.0            #> [119] htmltools_0.5.8.1         pkgconfig_2.0.3           #> [121] base64enc_0.1-3           sparseMatrixStats_1.17.2  #> [123] highr_0.11                dbplyr_2.5.0              #> [125] fastmap_1.2.0             ensembldb_2.29.1          #> [127] rlang_1.1.4               GlobalOptions_0.1.2       #> [129] htmlwidgets_1.6.4         UCSC.utils_1.1.0          #> [131] DelayedMatrixStats_1.27.3 farver_2.1.2              #> [133] jquerylib_0.1.4           jsonlite_1.8.9            #> [135] BiocParallel_1.39.0       R.oo_1.26.0               #> [137] BiocSingular_1.21.4       VariantAnnotation_1.51.1  #> [139] RCurl_1.98-1.16           magrittr_2.0.3            #> [141] Formula_1.2-5             scuttle_1.15.4            #> [143] GenomeInfoDbData_1.2.13   Rhdf5lib_1.27.0           #> [145] munsell_0.5.1             Rcpp_1.0.13               #> [147] viridis_0.6.5             reticulate_1.39.0         #> [149] stringi_1.8.4             zlibbioc_1.51.1           #> [151] plyr_1.8.9                ggstats_0.7.0             #> [153] parallel_4.4.1            listenv_0.9.1             #> [155] ggrepel_0.9.6             Biostrings_2.73.2         #> [157] hms_1.1.3                 circlize_0.4.16           #> [159] locfit_1.5-9.10           igraph_2.0.3              #> [161] reshape2_1.4.4            biomaRt_2.61.3            #> [163] ScaledMatrix_1.13.0       XML_3.99-0.17             #> [165] evaluate_1.0.1            biovizBase_1.53.0         #> [167] scran_1.33.2              BiocManager_1.30.25       #> [169] tzdb_0.4.0                foreach_1.5.2             #> [171] tidyr_1.3.1               purrr_1.0.2               #> [173] future_1.34.0             clue_0.3-65               #> [175] ggplot2_3.5.1             rsvd_1.0.5                #> [177] restfulr_0.0.15           AnnotationFilter_1.29.0   #> [179] viridisLite_0.4.2         ragg_1.3.3                #> [181] OrganismDbi_1.47.0        tibble_3.2.1              #> [183] memoise_2.0.1             beeswarm_0.4.0            #> [185] AnnotationDbi_1.67.0      GenomicAlignments_1.41.0  #> [187] cluster_2.1.6             globals_0.16.3"},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luyi Tian. Author. Changqing Wang. Author, maintainer. Yupei . Author. Oliver Voogd. Author. Jakob Schuster. Author. Shian Su. Author. Matthew Ritchie. Contributor.","code":""},{"path":"https://mritchielab.github.io/FLAMES/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tian, L., Jabbari, J. S., Thijssen, R., et al. (2021). Comprehensive characterization single-cell full-length isoforms human mouse long-read sequencing. Genome Biology, 22(1), 310. https://doi.org/10.1186/s13059-021-02525-6","code":"@Article{,   author = {Luyi Tian and Jafar S Jabbari and Rachel Thijssen and Quentin Gouil and Shanika L Amarasinghe and Oliver Voogd and Hasaru Kariyawasam and Mei R M Du and Jakob Schuster and Changqing Wang and Shian Su and Xueyi Dong and Charity W Law and Alexis Lucattini and Yair David Joseph Prawer and Coralina Collar-Fernández and Jin D Chung and Timur Naim and Audrey Chan and Chi Hai Ly and Gordon S Lynch and James G Ryall and Casey J A Anttila and Hongke Peng and Mary Ann Anderson and Christoffer Flensburg and Ian Majewski and Andrew W Roberts and David C S Huang and Michael B Clark and Matthew E Ritchie},   title = {Comprehensive Characterization of Single-Cell Full-Length Isoforms in Human and Mouse with Long-Read Sequencing},   journal = {Genome Biology},   year = {2021},   volume = {22},   number = {1},   pages = {310},   doi = {10.1186/s13059-021-02525-6}, }"},{"path":"https://mritchielab.github.io/FLAMES/index.html","id":"flames","dir":"","previous_headings":"","what":"FLAMES","title":"FLAMES","text":"FLAMES package provides framework performing single-cell bulk read full-length analysis mutations splicing. FLAMES performs cell barcode UMI assignment nanopore reads well semi-supervised isoform detection quantification. FLAMES designed easy quick use, powerful workflow isoform detection quantification, splicing analysis mutation detection. Bioconductor release FLAMES can installed : latest development version can installed : Input FLAMES fastq files generated long-read platform. Using cell barcode annotation obtained short-read data reference, pipeline identifies trims cell barcodes/UMI sequences long reads. barcode assignment, reads aligned relevant genome obtain draft read alignment. draft alignment polished grouped generate consensus transcript assembly. reads aligned using transcript assembly reference quantified.  figure provides high level overview main steps FLAMES pipeline. optional arguments left colour coded associate specific step apply . FLAMES vignette can found using:","code":"if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"FLAMES\") if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"OliverVoogd/FLAMES\") # FLAMES must be installed browseVignettes(\"FLAMES\")"},{"path":"https://mritchielab.github.io/FLAMES/reference/FLAMES.html","id":null,"dir":"Reference","previous_headings":"","what":"FLAMES: full-length analysis of mutations and splicing — FLAMES","title":"FLAMES: full-length analysis of mutations and splicing — FLAMES","text":"FLAMES: full-length analysis mutations splicing","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/annotation_to_fasta.html","id":null,"dir":"Reference","previous_headings":"","what":"GTF/GFF to FASTA conversion — annotation_to_fasta","title":"GTF/GFF to FASTA conversion — annotation_to_fasta","text":"convert transcript annotation transcriptome assembly FASTA file. genome annotation first imported TxDb object used extract transcript sequence genome assembly.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/annotation_to_fasta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GTF/GFF to FASTA conversion — annotation_to_fasta","text":"","code":"annotation_to_fasta(isoform_annotation, genome_fa, outdir, extract_fn)"},{"path":"https://mritchielab.github.io/FLAMES/reference/annotation_to_fasta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GTF/GFF to FASTA conversion — annotation_to_fasta","text":"isoform_annotation Path annotation file (GTF/GFF3) genome_fa file path genome fasta file. outdir path directory store transcriptome transcript_assembly.fa. extract_fn (optional) Function extract GRangesList genome TxDb object. E.g. function(txdb){GenomicFeatures::cdsBy(txdb, =\"tx\", use.names=TRUE)}","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/annotation_to_fasta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GTF/GFF to FASTA conversion — annotation_to_fasta","text":"Path outputted transcriptome assembly","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/annotation_to_fasta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GTF/GFF to FASTA conversion — annotation_to_fasta","text":"","code":"fasta <- annotation_to_fasta(system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"), system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"), tempdir()) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   stop_codon. This information was ignored. #> OK cat(readChar(fasta, nchars = 1e3)) #> >ENSMUST00000225994.1 #> CTCTTTTCCTCCTCTCCAGCTCCGGCGCCGTAGCCATCATGAATGACACAGTAACCATCCGGACCAGGAAGTTCATGACC #> AACCGTCTGCTTCAGAGGAAACAGATGGTCATTGATGTCCTTCATCCTGGGAAGGCAACAGTACCAAAGACAGAAATTCG #> GGAAAAGCTGGCCAAAATGTACAAAACCACACCAGATGTCATCTTTGTATTTGGATTCAGAACCCACTTCGGTGGTGGCA #> AGACCACTGGCTTTGGCATGATCTATGATTCTTTAGATTATGCAAAGAAGAATGAGCCTAAACACAGACTGGCAAGAGTA #> GGTATCTTATTCTTTAATGGATACATGCCTGTAATCCCAGCCTGGACTGAGTTAGGATGGCAAGTTAGATTTTGTTTTCC #> AGTGTATATTGGGATACAATAAGCAGTTTGGGCCAAACTTGTGGTGTTCTACCTACCCACTAGCCCATCTCCATGCAGTT #> TCTCTGGCCTTCTGAACTGGAACTTAGCAGTCTTTACTGGGCTTTCTATTTCTAAGTAGTGGAATTGCAGGTGTGCACTG #> CCATACCTCACTGTTTTGTATGAGCCGTGCTGCCGTCCATGCCTAGGAAAAGTTGGTATCATTTAATGGGAAAGTTACCA #> TATACAATATACAATGCACACATGGTACCTTTAAAAATGTACAAACTTCATGTAGTCCAAAATGGGTAACAAGCTTGGTT #> GATGGTCAGGATGCACCTGGCTGGCTTATTTCATTCTTTTAGGTGACTTCTCACTGTCGCCCAGGCTGACCTCCTCTGTC #> TCCAGCGTGGTGAGATTACAGGCATGGGTTGCCCACCCTGAGTTATTTTCTTGTTTGTTTCATTGGGTTGTTTATTTGAG #> GCATGGCCTTTAGCACAGGCTAGCCACAAACTGGGAGTTACTTTACCCAGTTTCATGAGTTCTTTAGTCCATTTACTCCT #> TGGTAT"},{"path":"https://mritchielab.github.io/FLAMES/reference/blaze.html","id":null,"dir":"Reference","previous_headings":"","what":"BLAZE Assign reads to cell barcodes. — blaze","title":"BLAZE Assign reads to cell barcodes. — blaze","text":"Uses BLAZE generate barcode list assign reads cell barcodes.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/blaze.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BLAZE Assign reads to cell barcodes. — blaze","text":"","code":"blaze(expect_cells, fq_in, ...)"},{"path":"https://mritchielab.github.io/FLAMES/reference/blaze.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BLAZE Assign reads to cell barcodes. — blaze","text":"expect_cells Integer, expected number cells. Note: just rough estimate. E.g., targeted number cells. fq_in File path fastq file used query sequence file ... Additional BLAZE configuration parameters. E.g., setting `'output-prefix'='some_prefix'` equivalent specifying `–output-prefix some_prefix` BLAZE; Similarly, `overwrite=TRUE` equivalent switch `–overwrite` option. Note specified parameters override parameters specified configuration file. available options can found https://github.com/shimlab/BLAZE.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/blaze.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BLAZE Assign reads to cell barcodes. — blaze","text":"data.frame summarising reads aligned. outputs written disk. details output files can found https://github.com/shimlab/BLAZE.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/blaze.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BLAZE Assign reads to cell barcodes. — blaze","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) fastq1_url <- 'https://raw.githubusercontent.com/shimlab/BLAZE/main/test/data/FAR20033_pass_51e510db_100.fastq' fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, 'Fastq1', fastq1_url))]] outdir <- tempfile() dir.create(outdir) if (FALSE) { # \\dontrun{ blaze(expect_cells=10, fastq1, overwrite=TRUE) } # }"},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipeline for Bulk Data — bulk_long_pipeline","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"Semi-supervised isofrom detection annotation long read data. variant meant bulk samples. Specific parameters relating analysis can changed either function arguments, configuration JSON file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"","code":"bulk_long_pipeline(   annotation,   fastq,   outdir,   genome_fa,   minimap2 = NULL,   k8 = NULL,   config_file = NULL )"},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"annotation file path annotation file GFF3 format fastq file path input fastq file outdir path directory store output files. genome_fa file path genome fasta file. minimap2 Path minimap2, PATH. required either do_genome_align do_read_realign TRUE. k8 Path k8 Javascript shell binary. required do_genome_align TRUE. config_file File path JSON configuration file. specified, config_file overrides configuration parameters","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"do_transcript_quantification set true, bulk_long_pipeline returns SummarizedExperiment object, containing count matrix assay, gene annotations metadata, well list output files generated pipeline. pipeline also outputs number output files given outdir directory. output files generated pipeline : transcript_count.csv.gz - transcript count matrix (also contained SummarizedExperiment) isoform_annotated.filtered.gff3 - isoforms gff3 format (also contained SummarizedExperiment) transcript_assembly.fa - transcript sequence isoforms align2genome.bam - sorted BAM file reads aligned genome realign2transcript.bam - sorted realigned BAM file using transcript_assembly.fa reference tss_tes.bedgraph - TSS TES enrichment reads (QC) do_transcript_quantification set false, nothing returned","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"default FLAMES use minimap2 read alignment. genome alignment step (do_genome_align), FLAMES summarizes alignment read grouping reads similar splice junctions get raw isoform annotation (do_isoform_id). raw isoform annotation compared reference annotation correct potential splice site transcript start/end errors. Transcripts similar splice junctions transcript start/end reference transcript merged reference. process also collapse isoforms likely truncated transcripts. isoform_id_bambu set TRUE, bambu::bambu used generate updated annotations. Next read realignment step (do_read_realign), sequence transcript update annotation extracted, reads realigned updated transcript_assembly.fa minimap2. transcripts full-length aligned reads discarded. reads assigned transcripts based alignment score, fractions reads aligned transcript coverage. Reads uniquely assigned transcripts low transcript coverage discarded. UMI transcript count matrix generated collapsing reads UMI similar way done short-read scRNA-seq data, allowing edit distance 2 default. parameters, minimal distance splice site minimal percentage transcript coverage can modified JSON configuration file (config_file). default parameters can changed either function arguments configuration JSON file config_file. pipeline_parameters section specifies steps executed pipeline - default, steps executed. isoform_parameters section affects isoform detection - key parameters include: Min_sup_cnt causes transcripts less reads aligned value discarded MAX_TS_DIST merges transcripts intron chain TSS/TES distace less MAX_TS_DIST strand_specific specifies reads strand mRNA (1), reverse complemented (-1) strand specific (0), results strand information based reference annotation.","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/bulk_long_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline for Bulk Data — bulk_long_pipeline","text":"","code":"# download the two fastq files, move them to a folder to be merged together temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <-   \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" # download the required fastq files, and move them to new folder fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] fastq2 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq2\", paste(file_url, \"fastq/sample2.fastq.gz\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] fastq_dir <- paste(temp_path, \"fastq_dir\", sep = \"/\") # the downloaded fastq files need to be in a directory to be merged together dir.create(fastq_dir) file.copy(c(fastq1, fastq2), fastq_dir) #> [1] TRUE TRUE unlink(c(fastq1, fastq2)) # the original files can be deleted  outdir <- tempfile() dir.create(outdir) se <- bulk_long_pipeline(   annotation = annotation, fastq = fastq_dir, outdir = outdir, genome_fa = genome_fa,   config_file = create_config(outdir, type = \"sc_3end\", threads = 1, no_flank = TRUE) ) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a9fcb1d/config_file_7722.json  #> #### Input parameters: #> { #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [1], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [true] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [true] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }  #> gene annotation: /tmp/Rtmprnnob2/file1e2a52b224ca/1e2a62830dbf_SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf  #> genome fasta: /tmp/Rtmprnnob2/file1e2a52b224ca/1e2a13fa2713_SIRV_isoforms_multi-fasta_170612a.fasta  #> input fastq files: /tmp/Rtmprnnob2/file1e2a52b224ca/fastq_dir/1e2a29d8b229_sample1.fastq.gz #>  /tmp/Rtmprnnob2/file1e2a52b224ca/fastq_dir/1e2a52ed659c_sample2.fastq.gz #> output directory: /tmp/Rtmprnnob2/file1e2a9fcb1d  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> \tAligning sample  1e2a29d8b229_sample1 ... #> 03:14:00 AM Wed Oct 16 2024 minimap2_align #> \tAligning sample  1e2a52ed659c_sample2 ... #> 03:14:03 AM Wed Oct 16 2024 minimap2_align #> 03:14:06 AM Wed Oct 16 2024 find_isoform #> #### Realign to transcript using minimap2 #> \tRealigning sample  1e2a29d8b229_sample1 ... #> 03:14:07 AM Wed Oct 16 2024 minimap2_realign #> file renamed to  1e2a29d8b229_sample1_realign2transcript.bam  #> Warning: cannot remove file '/tmp/Rtmprnnob2/file1e2a9fcb1d/1e2a29d8b229_sample1_tmp_align.bam', reason 'No such file or directory' #> \tRealigning sample  1e2a52ed659c_sample2 ... #> 03:14:08 AM Wed Oct 16 2024 minimap2_realign #> file renamed to  1e2a52ed659c_sample2_realign2transcript.bam  #> Warning: cannot remove file '/tmp/Rtmprnnob2/file1e2a9fcb1d/1e2a52ed659c_sample2_tmp_align.bam', reason 'No such file or directory' #> #### Generating transcript count matrix"},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine SCE — combine_sce","title":"Combine SCE — combine_sce","text":"Combine FLT-seq SingleCellExperiment objects","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine SCE — combine_sce","text":"","code":"combine_sce(sce_with_lr, sce_without_lr)"},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine SCE — combine_sce","text":"sce_with_lr SingleCellExperiment object long short reads. long-read transcript counts stored 'transcript' altExp slot. sce_without_lr SingleCellExperiment object short reads.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine SCE — combine_sce","text":"SingleCellExperiment object combined gene counts \"transcript\" altExp slot.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine SCE — combine_sce","text":"protcols like FLT-seq generate two libraries, one short long reads, one short reads, function combines two libraries single SingleCellExperiment object. library long short reads, long-read transcript counts stored 'transcript' altExp slot SingleCellExperiment object. function combine short-read gene counts libraries, transcripts counts, leave NA values cells short-read library. sc_impute_transcript function can used impute NA values.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/combine_sce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine SCE — combine_sce","text":"","code":"with_lr <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = matrix(rpois(100, 5), ncol = 10))) without_lr <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = matrix(rpois(200, 5), ncol = 20))) long_read <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = matrix(rpois(50, 5), ncol = 10))) SingleCellExperiment::altExp(with_lr, \"transcript\") <- long_read SummarizedExperiment::colData(with_lr)$Barcode <- paste0(1:10, \"-1\") SummarizedExperiment::colData(without_lr)$Barcode <- paste0(8:27, \"-1\") rownames(with_lr) <- as.character(101:110) rownames(without_lr) <- as.character(103:112) rownames(long_read) <- as.character(1001:1005) combined_sce <- FLAMES::combine_sce(sce_with_lr = with_lr, sce_without_lr = without_lr) #> Missing colnames, using Barcode from colData as colnames combined_sce #> class: SingleCellExperiment  #> dim: 8 27  #> metadata(0): #> assays(1): counts #> rownames(8): 103 104 ... 109 110 #> rowData names(0): #> colnames: NULL #> colData names(1): Barcode #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(1): transcript"},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/convolution_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolution filter for smoothing transcript coverages — convolution_filter","text":"","code":"convolution_filter(x, threshold = 0.15, width = 2, trim = 0.05)"},{"path":"https://mritchielab.github.io/FLAMES/reference/convolution_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolution filter for smoothing transcript coverages — convolution_filter","text":"x numeric vector coverage values threshold numeric, threshold maximum absolute value convolution width numeric, width 1s -1s kernal. E.g. width = 2 result kernal c(1, 1, -1, -1) trim numeric, proportion coverage values ignore ends convolution.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/convolution_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolution filter for smoothing transcript coverages — convolution_filter","text":"logical, TRUE transcript passes filter, FALSE otherwise","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/convolution_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convolution filter for smoothing transcript coverages — convolution_filter","text":"","code":"# A >30% drop in coverage will fail the filter with threshold = 0.3 convolution_filter(c(1, 1, 1, 0.69, 0.69, 0.69), threshold = 0.3) #> [1] FALSE convolution_filter(c(1, 1, 1, 0.71, 0.7, 0.7), threshold = 0.3) #> [1] TRUE"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Configuration File From Arguments — create_config","title":"Create Configuration File From Arguments — create_config","text":"Create Configuration File Arguments","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Configuration File From Arguments — create_config","text":"","code":"create_config(outdir, type = \"sc_3end\", ...)"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Configuration File From Arguments — create_config","text":"outdir destination directory configuratio nfile type use example config, available values: \"sc_3end\" - config 10x 3' end ONT reads \"SIRV\" - config SIRV example reads ... Configuration parameters. seed - Integer. Seed minimap2. threads - Number threads use. do_barcode_demultiplex - Boolean. Specifies whether run barcode demultiplexing step. do_genome_alignment - Boolean. Specifies whether run genome alignment step. TRUE recommended do_gene_quantification - Boolean. Specifies whether run gene quantification using genome alignment results. TRUE recommended do_isoform_identification - Boolean. Specifies whether run isoform identification step. TRUE recommended bambu_isoform_identification - Boolean. Whether use Bambu isoform identification. multithread_isoform_identification - Boolean. Whether use FLAMES' new multithreaded Cpp implementation isoform identification. do_read_realignment - Boolean. Specifies whether run read realignment step. TRUE recommended do_transcript_quantification - Boolean. Specifies whether run transcript quantification step. TRUE recommended barcode_parameters - List. Parameters barcode demultiplexing passed find_barcode (except fastq, barcodes_file, stats_out, reads_out) threads, set pipeline, see ?find_barcode details. generate_raw_isoform - Boolean. Whether generate isoforms debugging purpose. max_dist - Maximum distance allowed merging splicing sites isoform consensus clustering. max_ts_dist - Maximum distance allowed merging transcript start/end position isoform consensus clustering. max_splice_match_dist - Maximum distance allowed merging splice site called data reference annotation. min_fl_exon_len - Minimum length first exon outside gene body reference annotation. correct alignment artifact max_site_per_splice - Maximum transcript start/end site combinations allowed per splice chain min_sup_cnt - Minimum number read support isoform decrease number significantly increase number isoform detected. min_cnt_pct - Minimum percentage count isoform relative total count gene. min_sup_pct - Minimum percentage count splice chain support given transcript start/end site combination. strand_specific - 0, 1 -1. 1 indicates reads strand mRNA, -1 indicates reads reverse complemented, 0 indicates reads strand specific. remove_incomp_reads - strenge truncated isoform filtering. larger number means stringent filtering. use_junctions - whether use known splice junctions help correct alignment results no_flank - Boolean. synthetic spike-data. refer Minimap2 document detail use_annotation - Boolean. whether use reference help annotate known isoforms min_tr_coverage - Minimum percentage isoform coverage read aligned isoform min_read_coverage - Minimum percentage read coverage read uniquely aligned isoform","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Configuration File From Arguments — create_config","text":"file path config file created","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Configuration File From Arguments — create_config","text":"Create list object containing arguments supplied format usable FLAMES pipeline. Also writes object JSON file, located prefix 'config_' supplied outdir. Default values extdata/config_sclr_nanopore_3end.json used unprovided parameters.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Configuration File From Arguments — create_config","text":"","code":"# create the default configuration file outdir <- tempdir() config <- create_config(outdir) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/config_file_7722.json"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_sce_from_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","title":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","text":"Create SingleCellExperiment object FLAMES output folder","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_sce_from_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","text":"","code":"create_sce_from_dir(outdir, annotation)"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_sce_from_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","text":"outdir folder containing FLAMES output files annotation (Optional) annotation file used produce output files","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_sce_from_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","text":"list SingleCellExperiment objects multiple transcript matrices found output folder, SingleCellExperiment object one found","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_sce_from_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SingleCellExperiment object from FLAMES output folder — create_sce_from_dir","text":"","code":"outdir <- tempfile() dir.create(outdir) bc_allow <- file.path(outdir, \"bc_allow.tsv\") genome_fa <- file.path(outdir, \"rps24.fa\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) R.utils::gunzip(   filename = system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"),   destname = genome_fa, remove = FALSE ) annotation <- system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\")  sce <- FLAMES::sc_long_pipeline(   genome_fa = genome_fa,   fastq = system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),   annotation = annotation,   outdir = outdir,   barcodes_file = bc_allow,   config_file = create_config(outdir, oarfish_quantification = FALSE) ) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a1e57298/config_file_7722.json  #> Configured to use 8 cores, detected 4  #> 03:14:11 AM Wed Oct 16 2024 Start running #> 03:14:11 AM Wed Oct 16 2024 Demultiplexing using flexiplex... #> Matching cell barcodes... #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a1e57298/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /__w/_temp/Library/FLAMES/extdata/fastq/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done! #> 03:14:11 AM Wed Oct 16 2024 Demultiplex done #> Running FLAMES pipeline... #> #### Input parameters: #> { #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [8], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [false] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [false] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }  #> gene annotation: /__w/_temp/Library/FLAMES/extdata/rps24.gtf.gz  #> genome fasta: /tmp/Rtmprnnob2/file1e2a1e57298/rps24.fa  #> input fastq: /tmp/Rtmprnnob2/file1e2a1e57298/matched_reads.fastq  #> output directory: /tmp/Rtmprnnob2/file1e2a1e57298  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> 03:14:12 AM Wed Oct 16 2024 minimap2_align #> 03:14:12 AM Wed Oct 16 2024 Start gene quantification and UMI deduplication #> 03:14:12 AM Wed Oct 16 2024 quantify genes  #> Found genome alignment file(s): \talign2genome.bam #> 03:14:13 AM Wed Oct 16 2024 Gene quantification and UMI deduplication done! #> 03:14:13 AM Wed Oct 16 2024 Start isoform identificaiton #> 03:14:13 AM Wed Oct 16 2024 find_isoform #> 03:14:13 AM Wed Oct 16 2024 Isoform identificaiton done #> #### Realigning deduplicated reads to transcript using minimap2 #> 03:14:13 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #> #### Generating transcript count matrix #> 03:14:13 AM Wed Oct 16 2024 quantify transcripts  #> Found realignment file(s): \trealign2transcript.bam sce_2 <- create_sce_from_dir(outdir, annotation)"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_se_from_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","title":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","text":"Create SummarizedExperiment object FLAMES output folder","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_se_from_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","text":"","code":"create_se_from_dir(outdir, annotation)"},{"path":"https://mritchielab.github.io/FLAMES/reference/create_se_from_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","text":"outdir folder containing FLAMES output files annotation (Optional) annotation file used produce output files","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_se_from_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","text":"SummarizedExperiment object","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/create_se_from_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create SummarizedExperiment object from FLAMES output folder — create_se_from_dir","text":"","code":"# download the two fastq files, move them to a folder to be merged together temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <-   \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" # download the required fastq files, and move them to new folder fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] fastq2 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq2\", paste(file_url, \"fastq/sample2.fastq.gz\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] fastq_dir <- paste(temp_path, \"fastq_dir\", sep = \"/\") # the downloaded fastq files need to be in a directory to be merged together dir.create(fastq_dir) file.copy(c(fastq1, fastq2), fastq_dir) #> [1] TRUE TRUE unlink(c(fastq1, fastq2)) # the original files can be deleted  outdir <- tempfile() dir.create(outdir) se <- bulk_long_pipeline(   annotation = annotation, fastq = fastq_dir, outdir = outdir, genome_fa = genome_fa,   config_file = create_config(outdir, type = \"sc_3end\", threads = 1, no_flank = TRUE) ) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a4ed91526/config_file_7722.json  #> #### Input parameters: #> { #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [1], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [true] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [true] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }  #> gene annotation: /tmp/Rtmprnnob2/file1e2a5710cf21/1e2a2c705ce1_SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf  #> genome fasta: /tmp/Rtmprnnob2/file1e2a5710cf21/1e2a7e97f464_SIRV_isoforms_multi-fasta_170612a.fasta  #> input fastq files: /tmp/Rtmprnnob2/file1e2a5710cf21/fastq_dir/1e2a1666e843_sample1.fastq.gz #>  /tmp/Rtmprnnob2/file1e2a5710cf21/fastq_dir/1e2a2c092ca_sample2.fastq.gz #> output directory: /tmp/Rtmprnnob2/file1e2a4ed91526  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> \tAligning sample  1e2a1666e843_sample1 ... #> 03:14:15 AM Wed Oct 16 2024 minimap2_align #> \tAligning sample  1e2a2c092ca_sample2 ... #> 03:14:19 AM Wed Oct 16 2024 minimap2_align #> 03:14:22 AM Wed Oct 16 2024 find_isoform #> #### Realign to transcript using minimap2 #> \tRealigning sample  1e2a1666e843_sample1 ... #> 03:14:22 AM Wed Oct 16 2024 minimap2_realign #> file renamed to  1e2a1666e843_sample1_realign2transcript.bam  #> Warning: cannot remove file '/tmp/Rtmprnnob2/file1e2a4ed91526/1e2a1666e843_sample1_tmp_align.bam', reason 'No such file or directory' #> \tRealigning sample  1e2a2c092ca_sample2 ... #> 03:14:23 AM Wed Oct 16 2024 minimap2_realign #> file renamed to  1e2a2c092ca_sample2_realign2transcript.bam  #> Warning: cannot remove file '/tmp/Rtmprnnob2/file1e2a4ed91526/1e2a2c092ca_sample2_tmp_align.bam', reason 'No such file or directory' #> #### Generating transcript count matrix"},{"path":"https://mritchielab.github.io/FLAMES/reference/cutadapt.html","id":null,"dir":"Reference","previous_headings":"","what":"cutadapt wrapper — cutadapt","title":"cutadapt wrapper — cutadapt","text":"trim TSO adaptor cutadapt","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/cutadapt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cutadapt wrapper — cutadapt","text":"","code":"cutadapt(args)"},{"path":"https://mritchielab.github.io/FLAMES/reference/cutadapt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cutadapt wrapper — cutadapt","text":"args arguments passed cutadapt","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/cutadapt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cutadapt wrapper — cutadapt","text":"Exit code cutadapt","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/cutadapt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cutadapt wrapper — cutadapt","text":"","code":"if (FALSE) { # \\dontrun{  cutadapt(\"-h\") } # }"},{"path":"https://mritchielab.github.io/FLAMES/reference/demultiplex_sockeye.html","id":null,"dir":"Reference","previous_headings":"","what":"Demultiplex reads using Sockeye outputs — demultiplex_sockeye","title":"Demultiplex reads using Sockeye outputs — demultiplex_sockeye","text":"Demultiplex reads using cell_umi_gene.tsv file Sockeye.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/demultiplex_sockeye.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demultiplex reads using Sockeye outputs — demultiplex_sockeye","text":"","code":"demultiplex_sockeye(fastq_dir, sockeye_tsv, out_fq)"},{"path":"https://mritchielab.github.io/FLAMES/reference/demultiplex_sockeye.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demultiplex reads using Sockeye outputs — demultiplex_sockeye","text":"fastq_dir folder containing FASTQ files Sockeye's output ingest/chunked_fastqs. sockeye_tsv cell_umi_gene.tsv file Sockeye. out_fq output FASTQ file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/demultiplex_sockeye.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demultiplex reads using Sockeye outputs — demultiplex_sockeye","text":"returns NULL","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"filter annotation for plotting coverages — filter_annotation","title":"filter annotation for plotting coverages — filter_annotation","text":"Removes isoform annotations produce ambigious reads, isoforms differ 5' / 3' end. useful plotting average coverage plots.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter annotation for plotting coverages — filter_annotation","text":"","code":"filter_annotation(annotation, keep = \"tss_differ\")"},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter annotation for plotting coverages — filter_annotation","text":"annotation path GTF annotation file, parsed GenomicRanges object. keep string, one 'tss_differ' (keep isoforms differ transcription start site position), 'tes_differ' (keep differ transcription end site position), '' (keep differ start end site), 'single_transcripts' (keep genes contains sinlge transcript).","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter annotation for plotting coverages — filter_annotation","text":"GenomicRanges filtered isoforms","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"filter annotation for plotting coverages — filter_annotation","text":"","code":"filtered_annotation <- filter_annotation(   system.file(\"extdata\", \"rps24.gtf.gz\", package = 'FLAMES'), keep = 'tes_differ') #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   stop_codon. This information was ignored. #> OK filtered_annotation #> GRanges object with 6 ranges and 2 metadata columns: #>       seqnames    ranges strand |     tx_id              tx_name #>          <Rle> <IRanges>  <Rle> | <integer>          <character> #>   [1]    chr14   19-5159      + |         1 ENSMUST00000225994.1 #>   [2]    chr14   32-3389      + |         6 ENSMUST00000225117.1 #>   [3]    chr14   68-5124      + |         7 ENSMUST00000224568.1 #>   [4]    chr14   86-1118      + |         8 ENSMUST00000224549.1 #>   [5]    chr14  160-2761      + |         9 ENSMUST00000224569.1 #>   [6]    chr14  450-1290      + |        10 ENSMUST00000224699.1 #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter transcript coverage — filter_coverage","title":"Filter transcript coverage — filter_coverage","text":"Filter transcript coverage applying filter function coverage values.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter transcript coverage — filter_coverage","text":"","code":"filter_coverage(x, filter_fn = convolution_filter)"},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter transcript coverage — filter_coverage","text":"x tibble returned get_coverage, BAM file path, GAlignments object. filter_fn filter function apply coverage values. function take numeric vector coverage values return logical value (TRUE transcript passes filter, FALSE otherwise). default filter function convolution_filter, filters transcripts sharp drops / rises coverage.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter transcript coverage — filter_coverage","text":"tibble transcript information coverages, transcipts pass filter","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/filter_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter transcript coverage — filter_coverage","text":"","code":"# Create a BAM file with minimap2_realign temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- 'https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data' fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, 'Fastq1', paste(file_url, 'fastq/sample1.fastq.gz', sep = '/')))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, 'genome.fa', paste(file_url, 'SIRV_isoforms_multi-fasta_170612a.fasta', sep = '/')))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, 'annot.gtf', paste(file_url, 'SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf', sep = '/')))]] outdir <- tempfile() dir.create(outdir) fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   exon. This information was ignored. #> OK minimap2_realign(   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")),   fq_in = fastq1,   outdir = outdir ) #> 03:14:27 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #>                                                         total mapped primary #> /tmp/Rtmprnnob2/file1e2a51cc3ade/realign2transcript.bam  4554   3764    2500 #>                                                         secondary #> /tmp/Rtmprnnob2/file1e2a51cc3ade/realign2transcript.bam      2051 x <- get_coverage(file.path(outdir, 'realign2transcript.bam')) nrow(x) #> [1] 52 filter_coverage(x) |>   nrow() #> 52 transcripts found in the BAM file. #> 19(36.54%) transcripts failed the filter. #> Failed transcripts account for 215 reads, out of 1203(17.87%) reads in total. #> [1] 33"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Cell Barcodes — find_barcode","title":"Match Cell Barcodes — find_barcode","text":"demultiplex reads flexiplex","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Cell Barcodes — find_barcode","text":"","code":"find_barcode(   fastq,   barcodes_file,   max_bc_editdistance = 2,   max_flank_editdistance = 8,   reads_out,   stats_out,   threads = 1,   pattern = c(primer = \"CTACACGACGCTCTTCCGATCT\", BC = paste0(rep(\"N\", 16), collapse =     \"\"), UMI = paste0(rep(\"N\", 12), collapse = \"\"), polyT = paste0(rep(\"T\", 9), collapse     = \"\")),   TSO_seq = \"\",   TSO_prime = 3,   strand = \"+\",   full_length_only = FALSE )"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Cell Barcodes — find_barcode","text":"fastq character vector paths FASTQ files folders, named, names used sample names, otherwise file names used barcodes_file path file containing barcode allow-list, one barcode line max_bc_editdistance max edit distances barcode sequence max_flank_editdistance max edit distances flanking sequences (primer polyT) reads_out path output FASTQ file; multiple samples processed, sample name appended argument, e.g. provide path/.fq single sample, path/prefix multiple samples. stats_out path output stats file; similar reads_out, e.g. provide path/stats.tsv single sample, path/prefix multiple samples. threads number threads used pattern named character vector defining barcode pattern TSO_seq TSO sequence trimmed TSO_prime either 3 (TSO_seq 3' end) 5 (5' end) strand strand barcode pattern, either '+' '-' (read reverse complemented barcode matching '-') full_length_only boolean, TSO sequence provided, whether reads without TSO discarded","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Cell Barcodes — find_barcode","text":"list containing: reads_tb (tibble read demultiplexed information) input, output, read1_with_adapter cutadapt report (TSO trimming performed)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Match Cell Barcodes — find_barcode","text":"function demultiplexes reads searching flanking sequences (adaptors) around barcode sequence, matching allowed barcodes. single sample, either provide single FASTQ file folder containing FASTQ files. multiple samples, provide vector paths (either FASTQ files folders containing FASTQ files). Gzipped file input supported output uncompressed.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_barcode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Cell Barcodes — find_barcode","text":"","code":"outdir <- tempfile() dir.create(outdir) bc_allow <- file.path(outdir, \"bc_allow.tsv\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) # single sample find_barcode(   fastq = system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),   stats_out = file.path(outdir, \"bc_stat\"),   reads_out = file.path(outdir, \"demultiplexed.fq\"),   barcodes_file = bc_allow ) #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 1 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a6e154faa/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /__w/_temp/Library/FLAMES/extdata/fastq/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done! #> Skipping TSO trimming... #> $musc_rps24 #> $musc_rps24$reads_tb #> # A tibble: 372 × 8 #>    Read  CellBarcode FlankEditDist BarcodeEditDist UMI   TooShort Outfile Sample #>    <chr> <chr>               <int>           <int> <chr> <lgl>    <chr>   <chr>  #>  1 5040… CGGGTCAGTA…             1               0 CCGG… FALSE    /tmp/R… musc_… #>  2 d54e… CGGACTGAGT…             1               0 GGGA… FALSE    /tmp/R… musc_… #>  3 94bf… CTGTGCTTCC…             1               2 TTCT… FALSE    /tmp/R… musc_… #>  4 d644… GTCGTAATCC…             7               0 GGTA… FALSE    /tmp/R… musc_… #>  5 055d… TTTATGCAGA…             1               0 ATTC… FALSE    /tmp/R… musc_… #>  6 66cb… GTAACTGAGA…             2               0 TGAG… FALSE    /tmp/R… musc_… #>  7 e427… CGAACATGTC…             2               0 ATAC… FALSE    /tmp/R… musc_… #>  8 5f74… ACCGTAACAA…             3               1 CCTC… FALSE    /tmp/R… musc_… #>  9 f164… GACTAACTCC…             3               1 GTTC… FALSE    /tmp/R… musc_… #> 10 c7ae… CATCGAACAG…             2               1 TTAA… FALSE    /tmp/R… musc_… #> # ℹ 362 more rows #>  #> $musc_rps24$read_counts #>                                       total reads  #>                                               393  #>                               demultiplexed reads  #>                                               368  #>                                single match reads  #>                                               364  #> single strand single barcode multi-matching reads  #>                                                 0  #>              single strand multiple barcode reads  #>                                                 3  #>                 both strands single barcode reads  #>                                                 0  #>               both strands multiple barcode reads  #>                                                 1  #>  #>  # multi-sample fastq_dir <- tempfile() dir.create(fastq_dir) file.copy(system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),   file.path(fastq_dir, \"musc_rps24.fastq.gz\")) #> [1] TRUE sampled_lines <- readLines(file.path(fastq_dir, \"musc_rps24.fastq.gz\"), n = 400) writeLines(sampled_lines, file.path(fastq_dir, \"copy.fastq\")) result <- find_barcode(   # you can mix folders and files. each path will be considered as a sample   fastq = c(fastq_dir, system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\")),   stats_out = file.path(outdir, \"bc_stat\"),   reads_out = file.path(outdir, \"demultiplexed.fq\"),   barcodes_file = bc_allow, TSO_seq = \"CCCATGTACTCTGCGTTGATACCACTGCTT\" ) #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 1 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a6e154faa/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a25ddd63d/copy.fastq #> Searching for barcodes... #> Processing file: /tmp/Rtmprnnob2/file1e2a25ddd63d/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 493 #> Number of reads where at least one barcode was found: 460 #> Number of reads with exactly one barcode match: 455 #> Number of chimera reads: 2 #> All done! #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 1 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a6e154faa/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /__w/_temp/Library/FLAMES/extdata/fastq/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done!"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_bin.html","id":null,"dir":"Reference","previous_headings":"","what":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","title":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","text":"function wrapper base::Sys.find path command. also searches within FLAMES basilisk conda environment. function also replaces \"\" NA output base::Sys.make easier check binary found.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_bin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","text":"","code":"find_bin(command)"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_bin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","text":"command character, command search ","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_bin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","text":"character, path command NA","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_bin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find path to a binary Wrapper for Sys.which to find path to a binary — find_bin","text":"","code":"find_bin(\"minimap2\") #>                                                                    minimap2  #> \"/github/home/.cache/R/basilisk/1.17.2/FLAMES/1.11.3/bins_env/bin/minimap2\""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_isoform.html","id":null,"dir":"Reference","previous_headings":"","what":"Isoform identification — find_isoform","title":"Isoform identification — find_isoform","text":"Long-read isoform identification FLAMES bambu.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_isoform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isoform identification — find_isoform","text":"","code":"find_isoform(annotation, genome_fa, genome_bam, outdir, config)"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_isoform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isoform identification — find_isoform","text":"annotation Path annotation file. configured use bambu, annotation must provided GTF file. genome_fa file path genome fasta file. genome_bam File path BAM alignment file. Multiple files provided. outdir path directory store output files. config Parsed FLAMES configurations.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_isoform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isoform identification — find_isoform","text":"updated annotation transcriptome assembly saved output folder isoform_annotated.gff3 (GTF bambu selected) transcript_assembly.fa respectively.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_isoform.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isoform identification — find_isoform","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] outdir <- tempfile() dir.create(outdir) config <- jsonlite::fromJSON(   system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\") ) minimap2_align(   config = config,   fa_file = genome_fa,   fq_in = fastq1,   annot = annotation,   outdir = outdir ) #> 03:15:31 AM Wed Oct 16 2024 minimap2_align #>                                                  total mapped primary secondary #> /tmp/Rtmprnnob2/file1e2af4bef0a/align2genome.bam  2503   1772    2500         0 if (FALSE) { # \\dontrun{ find_isoform(   annotation = annotation, genome_fa = genome_fa,   genome_bam = file.path(outdir, \"align2genome.bam\"),   outdir = outdir, config = config ) } # }"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"bulk variant identification — find_variants","title":"bulk variant identification — find_variants","text":"Treat bam file bulk sample identify variants reference","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"bulk variant identification — find_variants","text":"","code":"find_variants(   bam_path,   reference,   annotation,   min_nucleotide_depth = 100,   homopolymer_window = 3,   annotated_region_only = FALSE,   names_from = \"gene_name\",   threads = 1 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"bulk variant identification — find_variants","text":"bam_path character(1) character(n): path bam file(s) aligned reference genome (transcriptome!). reference DNAStringSet: reference genome annotation GRanges: annotation reference genome. can load GTF/GFF annotation file anno <- rtracklayer::import(file). min_nucleotide_depth integer(1): minimum read depth position considered variant. homopolymer_window integer(1): window size calculate homopolymer percentage. homopolymer percentage calculated percentage frequent nucleotide window -homopolymer_window homopolymer_window nucleotides around variant position, excluding variant position . Calculation homopolymer percentage skipped homopolymer_window = 0. useful filtering Nanopore sequencing errors homopolymer regions. annotated_region_only logical(1): whether consider variants outside annotated regions. TRUE, variants outside annotated regions returned. FALSE, variants returned, take significantly longer time. names_from character(1): column name metadata column annotation (mcols(annotation)[, names_from]) use region column output. threads integer(1): number threads use. Threading done annotated region (annotated_region_only = FALSE) unannotated gaps bam file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"bulk variant identification — find_variants","text":"tibble columns: seqnames, pos, nucleotide, count, sum, freq, ref, region, homopolymer_pct, bam_path homopolymer percentage calculated percentage frequent nucleotide window homopolymer_window nucleotides around variant position, excluding variant position .","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"bulk variant identification — find_variants","text":"bam file treated bulk sample perform pileup identify variants. can run sc_mutations variants identified function get single-cell allele counts. Note reference genome FASTA files may chromosome names field `>chr1 1` instead `>chr1`. may need remove trailing number match chromosome names bam file, example names(ref) <- sapply(names(ref), function(x) strsplit(x, \" \")[[1]][1]).","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/find_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bulk variant identification — find_variants","text":"","code":"outdir <- tempfile() dir.create(outdir) genome_fa <- system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\") minimap2_align( # align to genome   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")),   fa_file = genome_fa,   fq_in = system.file(\"extdata\", \"fastq\", \"demultiplexed.fq.gz\", package = \"FLAMES\"),   annot = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),   outdir = outdir ) #> 03:15:34 AM Wed Oct 16 2024 minimap2_align #>                                                  total mapped primary secondary #> /tmp/Rtmprnnob2/file1e2ad74124c/align2genome.bam    10     10      10         0 variants <- find_variants(   bam_path = file.path(outdir, \"align2genome.bam\"),   reference = genome_fa,   annotation = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),   min_nucleotide_depth = 4 ) #> 03:15:35 Reading reference ... #> 03:15:35 Reading annotation ... #> 03:15:35 Adding unannotated gaps ... #> 03:15:35 Got 1 bam file, parallelizing over each region ... #> 03:15:36 Merging results ... #> 03:15:36 Calculating homopolymer percentages ... head(variants) #> # A tibble: 6 × 10 #>   seqnames   pos nucleotide count   sum  freq ref   bam_path              region #>   <fct>    <dbl> <fct>      <int> <dbl> <dbl> <fct> <chr>                 <chr>  #> 1 chr14     1084 G              4     9 0.444 A     /tmp/Rtmprnnob2/file… Rps24  #> 2 chr14     1085 C              4    10 0.4   T     /tmp/Rtmprnnob2/file… Rps24  #> 3 chr14     1217 A              4    10 0.4   G     /tmp/Rtmprnnob2/file… Rps24  #> 4 chr14     1384 -              4    10 0.4   A     /tmp/Rtmprnnob2/file… Rps24  #> 5 chr14     2724 +              4     9 0.444 G     /tmp/Rtmprnnob2/file… Rps24  #> 6 chr14     2789 -              5    10 0.5   A     /tmp/Rtmprnnob2/file… Rps24  #> # ℹ 1 more variable: homopolymer_pct <dbl>"},{"path":"https://mritchielab.github.io/FLAMES/reference/flexiplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Rcpp port of flexiplex — flexiplex","title":"Rcpp port of flexiplex — flexiplex","text":"demultiplex reads flexiplex, detailed description, see documentation original flexiplex: https://davidsongroup.github.io/flexiplex","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/flexiplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rcpp port of flexiplex — flexiplex","text":"","code":"flexiplex(   reads_in,   barcodes_file,   bc_as_readid,   max_bc_editdistance,   max_flank_editdistance,   pattern,   reads_out,   stats_out,   bc_out,   reverseCompliment,   n_threads )"},{"path":"https://mritchielab.github.io/FLAMES/reference/flexiplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rcpp port of flexiplex — flexiplex","text":"reads_in Input FASTQ FASTA file barcodes_file barcode allow-list file bc_as_readid bool, whether add demultiplexed barcode read ID field max_bc_editdistance max edit distance barcode ' max_flank_editdistance max edit distance flanking sequences ' pattern StringVector defining barcode structure, see [find_barcode] reads_out output file demultiplexed reads stats_out output file demultiplexed stats bc_out WIP reverseCompliment bool, whether reverse complement reads demultiplexing n_threads number threads used demultiplexing","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/flexiplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rcpp port of flexiplex — flexiplex","text":"integer return value. 0 represents normal return.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_GRangesList.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse FLAMES' GFF output — get_GRangesList","title":"Parse FLAMES' GFF output — get_GRangesList","text":"Parse FLAMES' GFF ouputs Genomic Ranges List","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_GRangesList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse FLAMES' GFF output — get_GRangesList","text":"","code":"get_GRangesList(file)"},{"path":"https://mritchielab.github.io/FLAMES/reference/get_GRangesList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse FLAMES' GFF output — get_GRangesList","text":"file GFF file parse","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_GRangesList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse FLAMES' GFF output — get_GRangesList","text":"Genomic Ranges List","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_GRangesList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse FLAMES' GFF output — get_GRangesList","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] outdir <- tempfile() dir.create(outdir) config <- jsonlite::fromJSON(   system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")) minimap2_align(   config = config,   fa_file = genome_fa,   fq_in = fastq1,   annot = annotation,   outdir = outdir ) #> 03:15:37 AM Wed Oct 16 2024 minimap2_align #>                                                   total mapped primary #> /tmp/Rtmprnnob2/file1e2a3923a0d0/align2genome.bam  2503   1772    2500 #>                                                   secondary #> /tmp/Rtmprnnob2/file1e2a3923a0d0/align2genome.bam         0 find_isoform(   annotation = annotation, genome_fa = genome_fa,   genome_bam = file.path(outdir, \"align2genome.bam\"),   outdir = outdir, config = config ) #> 03:15:40 AM Wed Oct 16 2024 find_isoform #> [1] \"/tmp/Rtmprnnob2/file1e2a3923a0d0/transcript_assembly.fa.fai\" grlist <- get_GRangesList(file = file.path(outdir, \"isoform_annotated.gff3\"))"},{"path":"https://mritchielab.github.io/FLAMES/reference/get_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Get read coverages from BAM file — get_coverage","title":"Get read coverages from BAM file — get_coverage","text":"Get read coverages transcript BAM file (GAlignments object). read coverages sampled 100 positions along transcript, coverage scaled dividing coverage position total read counts transcript. BAM file provided, alignment MAPQ < 5, secondary alignments supplementary alignments filtered . GAlignments object can also provided case alternative filtering desired.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get read coverages from BAM file — get_coverage","text":"","code":"get_coverage(bam, remove_UTR = FALSE, annotation)"},{"path":"https://mritchielab.github.io/FLAMES/reference/get_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get read coverages from BAM file — get_coverage","text":"bam path BAM file, parsed GAlignments object remove_UTR logical, TRUE, remove UTRs coverage annotation (Required remove_UTR = TRUE) path GTF annotation file","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get read coverages from BAM file — get_coverage","text":"tibble transcript information coverages, following columns: transcript: transcript name / ID read_counts: total number aligments transcript coverage_1-100: coverage 100 positions along transcript tr_length: length transcript","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/get_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get read coverages from BAM file — get_coverage","text":"","code":"# Create a BAM file with minimap2_realign temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- 'https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data' fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, 'Fastq1', paste(file_url, 'fastq/sample1.fastq.gz', sep = '/')))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, 'genome.fa', paste(file_url, 'SIRV_isoforms_multi-fasta_170612a.fasta', sep = '/')))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, 'annot.gtf', paste(file_url, 'SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf', sep = '/')))]] outdir <- tempfile() dir.create(outdir) fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   exon. This information was ignored. #> OK minimap2_realign(   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")),   fq_in = fastq1,   outdir = outdir ) #> 03:15:41 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #>                                                         total mapped primary #> /tmp/Rtmprnnob2/file1e2a166c78ea/realign2transcript.bam  4554   3764    2500 #>                                                         secondary #> /tmp/Rtmprnnob2/file1e2a166c78ea/realign2transcript.bam      2051 x <- get_coverage(file.path(outdir, 'realign2transcript.bam')) head(x) #> # A tibble: 6 × 103 #>   transcript coverage_1 coverage_2 coverage_3 coverage_4 coverage_5 coverage_6 #>   <chr>           <dbl>      <dbl>      <dbl>      <dbl>      <dbl>      <dbl> #> 1 SIRV108         0          0          0.2        0.2        0.4        0.6   #> 2 SIRV101         0          0.3        0.6        0.6        0.7        0.8   #> 3 SIRV106         0          0          0.174      0.348      0.435      0.478 #> 4 SIRV103         0          0.143      0.571      0.786      0.786      0.786 #> 5 SIRV102         0.286      0.571      0.571      0.714      0.714      0.714 #> 6 SIRV105         0          0          0.625      0.844      0.906      1     #> # ℹ 96 more variables: coverage_7 <dbl>, coverage_8 <dbl>, coverage_9 <dbl>, #> #   coverage_10 <dbl>, coverage_11 <dbl>, coverage_12 <dbl>, coverage_13 <dbl>, #> #   coverage_14 <dbl>, coverage_15 <dbl>, coverage_16 <dbl>, coverage_17 <dbl>, #> #   coverage_18 <dbl>, coverage_19 <dbl>, coverage_20 <dbl>, coverage_21 <dbl>, #> #   coverage_22 <dbl>, coverage_23 <dbl>, coverage_24 <dbl>, coverage_25 <dbl>, #> #   coverage_26 <dbl>, coverage_27 <dbl>, coverage_28 <dbl>, coverage_29 <dbl>, #> #   coverage_30 <dbl>, coverage_31 <dbl>, coverage_32 <dbl>, …"},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_align.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimap2 Align to Genome — minimap2_align","title":"Minimap2 Align to Genome — minimap2_align","text":"Uses minimap2 align sequences agains reference databse. Uses options '-ax splice -t 12 -k14 –secondary=fa_file fq_in'","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_align.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimap2 Align to Genome — minimap2_align","text":"","code":"minimap2_align(   config,   fa_file,   fq_in,   annot,   outdir,   minimap2 = NA,   k8 = NA,   samtools = NA,   prefix = NULL,   threads = 1 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_align.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimap2 Align to Genome — minimap2_align","text":"config Parsed list FLAMES config file fa_file Path fasta file used reference database alignment fq_in File path fastq file used query sequence file annot Genome annotation file used create junction bed files outdir Output folder minimap2 Path minimap2 binary k8 Path k8 Javascript shell binary samtools path samtools binary, required large datasets since Rsamtools support CSI indexing prefix String, prefix (e.g. sample name) outputted BAM file threads Integer, threads minimap2 use, see minimap2 documentation details, FLAMES try detect cores parameter provided.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_align.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimap2 Align to Genome — minimap2_align","text":"data.frame summarising reads aligned","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_align.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimap2 Align to Genome — minimap2_align","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- 'https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data' fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, 'Fastq1', paste(file_url, 'fastq/sample1.fastq.gz', sep = '/')))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, 'genome.fa', paste(file_url, 'SIRV_isoforms_multi-fasta_170612a.fasta', sep = '/')))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, 'annot.gtf', paste(file_url, 'SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf', sep = '/')))]] outdir <- tempfile() dir.create(outdir) minimap2_align(   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = 'FLAMES')   ),   fa_file = genome_fa,   fq_in = fastq1,   annot = annotation,   outdir = outdir ) #> 03:15:43 AM Wed Oct 16 2024 minimap2_align #>                                                  total mapped primary secondary #> /tmp/Rtmprnnob2/file1e2a36d207d/align2genome.bam  2503   1772    2500         0"},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_realign.html","id":null,"dir":"Reference","previous_headings":"","what":"Minimap2 re-align reads to transcriptome — minimap2_realign","title":"Minimap2 re-align reads to transcriptome — minimap2_realign","text":"Uses minimap2 re-align reads transcriptome","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_realign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Minimap2 re-align reads to transcriptome — minimap2_realign","text":"","code":"minimap2_realign(   config,   fq_in,   outdir,   minimap2,   samtools = NULL,   prefix = NULL,   minimap2_args,   sort_by,   threads = 1 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_realign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Minimap2 re-align reads to transcriptome — minimap2_realign","text":"config Parsed list FLAMES config file fq_in File path fastq file used query sequence file outdir Output folder minimap2 Path minimap2 binary samtools path samtools binary, required large datasets since Rsamtools support CSI indexing prefix String, prefix (e.g. sample name) outputted BAM file minimap2_args vector command line arguments pass minimap2 sort_by String, provided, sort BAM file tag instead position. threads Integer, threads minimap2 use, see minimap2 documentation details, FLAMES try detect cores parameter provided.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_realign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Minimap2 re-align reads to transcriptome — minimap2_realign","text":"data.frame summarising reads aligned","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/minimap2_realign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Minimap2 re-align reads to transcriptome — minimap2_realign","text":"","code":"outdir <- tempfile() dir.create(outdir) annotation <- system.file('extdata', 'rps24.gtf.gz', package = 'FLAMES') genome_fa <- system.file('extdata', 'rps24.fa.gz', package = 'FLAMES') fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   stop_codon. This information was ignored. #> OK fastq <- system.file('extdata', 'fastq', 'demultiplexed.fq.gz', package = 'FLAMES') minimap2_realign(   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = 'FLAMES')   ),   fq_in = fastq,   outdir = outdir ) #> 03:15:47 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #>                                                         total mapped primary #> /tmp/Rtmprnnob2/file1e2a6cd106e9/realign2transcript.bam    31     31      10 #>                                                         secondary #> /tmp/Rtmprnnob2/file1e2a6cd106e9/realign2transcript.bam        21"},{"path":"https://mritchielab.github.io/FLAMES/reference/parse_gff_tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Gff3 file — parse_gff_tree","title":"Parse Gff3 file — parse_gff_tree","text":"Parse Gff3 file 3 components: chromasome gene name, transcript dictionary, gene transcript dictionary transcript exon dictionary. components returned named list.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/parse_gff_tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Gff3 file — parse_gff_tree","text":"","code":"parse_gff_tree(gff_file)"},{"path":"https://mritchielab.github.io/FLAMES/reference/parse_gff_tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Gff3 file — parse_gff_tree","text":"gff_file file path gff3 file parse","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/parse_gff_tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Gff3 file — parse_gff_tree","text":"named list elements \"chr_to_gene\", \"transcript_dict\", \"gene_to_transcript\", \"transcript_to_exon\", containing data parsed gff3 file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/parse_gff_tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Gff3 file — parse_gff_tree","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <-     \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" gff <- bfc[[names(BiocFileCache::bfcadd(bfc, \"GFF\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] if (FALSE) parsed_gff <- parse_gff_tree(gff) # \\dontrun{}"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"plot read coverages — plot_coverage","title":"plot read coverages — plot_coverage","text":"Plot average read coverages length bin perticular isoform","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot read coverages — plot_coverage","text":"","code":"plot_coverage(   x,   quantiles = c(0, 0.2375, 0.475, 0.7125, 0.95, 1),   length_bins = c(0, 1, 2, 5, 10, Inf),   weight_fn = weight_transcripts,   filter_fn,   detailed = FALSE )"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot read coverages — plot_coverage","text":"x, path BAM file (aligning reads transcriptome), (GenomicAlignments::readGAlignments) parsed GAlignments object, tibble returned get_coverage, filtered tibble returned filter_coverage. quantiles numeric vector specify quantiles bin transcripts lengths length_bins missing. length bins determined read counts distributed acording quantiles. length_bins, numeric vector specify sizes bin transcripts weight_fn function calculate weights transcripts. function take numeric vector read counts return numeric vector weights. default function weight_transcripts, can change default parameters passing anonymous function like function(x) weight_transcripts(x, type = 'equal'). filter_fn Optional filter function filter transcripts plotting. See filter_fn parameter filter_coverage details. Providing filter fucntion providing filter_coverage passing result function. detailed logical, TRUE, also plot top 10 transcripts highest read counts length bin.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot read coverages — plot_coverage","text":"ggplot2 object coverage plot(s)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot read coverages — plot_coverage","text":"","code":"# Create a BAM file with minimap2_realign temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- 'https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data' fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, 'Fastq1', paste(file_url, 'fastq/sample1.fastq.gz', sep = '/')))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, 'genome.fa', paste(file_url, 'SIRV_isoforms_multi-fasta_170612a.fasta', sep = '/')))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, 'annot.gtf', paste(file_url, 'SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf', sep = '/')))]] outdir <- tempfile() dir.create(outdir) fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   exon. This information was ignored. #> OK minimap2_realign(   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")),   fq_in = fastq1,   outdir = outdir ) #> 03:15:49 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #>                                                         total mapped primary #> /tmp/Rtmprnnob2/file1e2a268e1070/realign2transcript.bam  4554   3764    2500 #>                                                         secondary #> /tmp/Rtmprnnob2/file1e2a268e1070/realign2transcript.bam      2051 # Plot the coverages directly from the BAM file plot_coverage(file.path(outdir, 'realign2transcript.bam')) #> Using quantiles to bin transcripts. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin.   # Get the coverage information first coverage <- get_coverage(file.path(outdir, 'realign2transcript.bam')) |>   dplyr::filter(read_counts > 2) |> # Filter out transcripts with read counts < 3   filter_coverage(filter_fn = convolution_filter) # Filter out transcripts with sharp drops / rises #> 45 transcripts found in the BAM file. #> 17(37.78%) transcripts failed the filter. #> Failed transcripts account for 212 reads, out of 1193(17.77%) reads in total. # Plot the filtered coverages plot_coverage(coverage, detailed = TRUE) #> Using quantiles to bin transcripts. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin.  # filtering function can also be passed directly to plot_coverage plot_coverage(file.path(outdir, 'realign2transcript.bam'), filter_fn = convolution_filter) #> 52 transcripts found in the BAM file. #> 19(36.54%) transcripts failed the filter. #> Failed transcripts account for 215 reads, out of 1203(17.87%) reads in total. #> Using quantiles to bin transcripts. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin. #> The number of transcripts is less than the inflection index, returning equal weights for the current bin."},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_demultiplex.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","title":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","text":"produce barplot cell barcode demultiplex statistics","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_demultiplex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","text":"","code":"plot_demultiplex(find_barcode_result)"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_demultiplex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","text":"find_barcode_result output find_barcode","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_demultiplex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","text":"list ggplot objects: reads_count_plot: stacked barplot : demultiplexed reads knee_plot: knee plot UMI counts TSO trimming flank_editdistance_plot: flanking sequence (adaptor) edit-distance plot barcode_editdistance_plot: barcode edit-distance plot cutadapt_plot: TSO trimming performed, number reads kept cutadapt","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_demultiplex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cell Barcode demultiplex statistics — plot_demultiplex","text":"","code":"outdir <- tempfile() dir.create(outdir) fastq_dir <- tempfile() dir.create(fastq_dir) file.copy(system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),   file.path(fastq_dir, \"musc_rps24.fastq.gz\")) #> [1] TRUE sampled_lines <- readLines(file.path(fastq_dir, \"musc_rps24.fastq.gz\"), n = 400) writeLines(sampled_lines, file.path(fastq_dir, \"copy.fastq\")) bc_allow <- file.path(outdir, \"bc_allow.tsv\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) find_barcode(   fastq = fastq_dir,   stats_out = file.path(outdir, \"bc_stat\"),   reads_out = file.path(outdir, \"demultiplexed.fq\"),   barcodes_file = bc_allow, TSO_seq = \"CCCATGTACTCTGCGTTGATACCACTGCTT\" ) |>   plot_demultiplex() #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 1 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a19678acb/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a2a1d3ea3/copy.fastq #> Searching for barcodes... #> Processing file: /tmp/Rtmprnnob2/file1e2a2a1d3ea3/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 493 #> Number of reads where at least one barcode was found: 460 #> Number of reads with exactly one barcode match: 455 #> Number of chimera reads: 2 #> All done! #> $reads_count_plot  #>  #> $knee_plot #> `geom_smooth()` using formula = 'y ~ x' #> Warning: span too small.   fewer data values than degrees of freedom. #> Warning: pseudoinverse used at 0.29368 #> Warning: neighborhood radius 0.30838 #> Warning: reciprocal condition number  0 #> Warning: There are other near singularities as well. 0.099732 #> Warning: zero-width neighborhood. make span bigger #> Warning: zero-width neighborhood. make span bigger #> Warning: Failed to fit group 1. #> Caused by error in `predLoess()`: #> ! NA/NaN/Inf in foreign function call (arg 5)  #>  #> $flank_editdistance_plot  #>  #> $barcode_editdistance_plot #> Warning: The following aesthetics were dropped during statistical transformation: fill. #> ℹ This can happen when ggplot fails to infer the correct grouping structure in #>   the data. #> ℹ Did you forget to specify a `group` aesthetic or to convert a numerical #>   variable into a factor?  #>  #> $cutadapt_plot  #>"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"FLAMES heetmap plots — plot_isoform_heatmap","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"Plot expression heatmap top n isoforms gene","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"","code":"plot_isoform_heatmap(   sce,   gene_id,   transcript_ids,   n = 4,   isoform_legend_width = 7,   col_low = \"#313695\",   col_mid = \"#FFFFBF\",   col_high = \"#A50026\",   color_quantile = 1 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"sce SingleCellExperiment object containing transcript counts, rowRanges rowData gene_id transcript_id columns. gene_id gene symbol interest, ignored transcript_ids provided. transcript_ids transcript ids plot. n number top isoforms plot gene. Ignored transcript_ids provided. isoform_legend_width width isoform legends heatmaps, cm. col_low Color cells low expression levels UMAPs. col_mid Color cells intermediate expression levels UMAPs. col_high Color cells high expression levels UMAPs. color_quantile lower upper expression quantile displayed bewteen col_low col_high, e.g. color_quantile = 0.95, cells expressions higher 95% cells shown col_high, cells expression lower 95% cells shown col_low.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"ComplexHeatmap","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"Takes SingleCellExperiment object plots expression heatmap isoform visualizations along genomic coordinates.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLAMES heetmap plots — plot_isoform_heatmap","text":"","code":"scmixology_lib10_transcripts |>   scuttle::logNormCounts() |>   plot_isoform_heatmap(gene = \"ENSG00000108107\") #> Constructing graphics... #> Constructing graphics... #> Constructing graphics... #> Constructing graphics..."},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":null,"dir":"Reference","previous_headings":"","what":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"Plot expression top n isoforms gene reduced dimensions","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"","code":"plot_isoform_reduced_dim(   sce,   gene_id,   transcript_ids,   n = 4,   reduced_dim_name = \"UMAP\",   use_gene_dimred = FALSE,   expr_func = function(x) {      SingleCellExperiment::logcounts(x)  },   col_low = \"#313695\",   col_mid = \"#FFFFBF\",   col_high = \"#A50026\",   color_quantile = 1,   format = \"plot_grid\",   ... )"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"sce SingleCellExperiment object containing transcript counts, rowRanges rowData gene_id transcript_id columns. gene_id gene symbol interest, ignored transcript_ids provided. transcript_ids transcript ids plot. n number top isoforms plot gene. Ignored transcript_ids provided. reduced_dim_name name reduced dimension use plotting cells. use_gene_dimred Whether use gene-level reduced dimensions plotting. Set TRUE SingleCellExperiment gene counts main assay transcript counts altExp. expr_func function extract expression values SingleCellExperiment object. Default logcounts. Alternatively, counts can used raw counts. col_low Color cells low expression levels UMAPs. col_mid Color cells intermediate expression levels UMAPs. col_high Color cells high expression levels UMAPs. color_quantile lower upper expression quantile displayed bewteen col_low col_high, e.g. color_quantile = 0.95, cells expressions higher 95% cells shown col_high, cells expression lower 95% cells shown col_low. format format output, either \"plot_grid\" \"list\". ... Additional arguments pass plot_grid.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"ggplot object UMAP(s)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"Takes SingleCellExperiment object plots expression reduced dimensions isoform visualizations along genomic coordinates.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoform_reduced_dim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLAMES isoform reduced dimensions plots — plot_isoform_reduced_dim","text":"","code":"scmixology_lib10 <-    scmixology_lib10[, colSums(SingleCellExperiment::counts(scmixology_lib10)) > 0] sce_lr <- scmixology_lib10[, colnames(scmixology_lib10) %in% colnames(scmixology_lib10_transcripts)] SingleCellExperiment::altExp(sce_lr, \"transcript\") <-   scmixology_lib10_transcripts[, colnames(sce_lr)] combined_sce <- combine_sce(sce_lr, scmixology_lib90) combined_sce <- combined_sce |>   scuttle::logNormCounts() |>   scater::runPCA() |>   scater::runUMAP() combined_imputed_sce <- sc_impute_transcript(combined_sce) #> Imputing transcript counts ... plot_isoform_reduced_dim(combined_sce, 'ENSG00000108107') #> Constructing graphics... #> Constructing graphics... #> Constructing graphics... #> Constructing graphics...  plot_isoform_reduced_dim(combined_imputed_sce, 'ENSG00000108107') #> Constructing graphics... #> Constructing graphics... #> Constructing graphics... #> Constructing graphics..."},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot isoforms — plot_isoforms","title":"Plot isoforms — plot_isoforms","text":"Plot isoforms, either gene list transcript ids.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot isoforms — plot_isoforms","text":"","code":"plot_isoforms(sce, gene_id, transcript_ids, n = 4, format = \"plot_grid\")"},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot isoforms — plot_isoforms","text":"sce SingleCellExperiment object containing transcript counts, rowRanges rowData gene_id transcript_id columns. gene_id gene symbol interest, ignored transcript_ids provided. transcript_ids transcript ids plot. n number top isoforms plot gene. Ignored transcript_ids provided. format format output, either \"plot_grid\" \"list\".","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot isoforms — plot_isoforms","text":"format = \"list\", list ggplot objects returned. Otherwise, grid plots returned.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot isoforms — plot_isoforms","text":"function takes SingleCellExperiment object plots top isoforms gene, list specified transcript ids. Either list plots together grid. function wraps ggbio::geom_alignment function plot isoforms, orders isoforms expression levels (specifying gene) order transcript_ids.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/plot_isoforms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot isoforms — plot_isoforms","text":"","code":"plot_isoforms(scmixology_lib10_transcripts, gene_id = \"ENSG00000108107\") #> Constructing graphics... #> Constructing graphics... #> Constructing graphics... #> Constructing graphics..."},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_gene.html","id":null,"dir":"Reference","previous_headings":"","what":"Gene quantification — quantify_gene","title":"Gene quantification — quantify_gene","text":"Calculate per gene UMI count matrix parsing genome alignment file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_gene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gene quantification — quantify_gene","text":"","code":"quantify_gene(   annotation,   outdir,   infq,   n_process,   pipeline = \"sc_single_sample\",   samples = NULL )"},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_gene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gene quantification — quantify_gene","text":"annotation file path annotation file GFF3 format outdir path directory store output files. infq input FASTQ file. n_process number processes use parallelization. pipeline pipeline type character string, either sc_single_sample (single-cell, single-sample), samples vector sample names, default file names input fastq files, folder names fastqs vector folders. bulk (bulk, single multi-sample), sc_multi_sample (single-cell, multiple samples)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_gene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gene quantification — quantify_gene","text":"count matrix saved output folder transcript_count.csv.gz.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_gene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gene quantification — quantify_gene","text":"genome alignment step (do_genome_align), alignment file parsed generate per gene UMI count matrix. gene annotation file, number reads whose mapped ranges overlap gene's genome coordinates assigned gene. reads can assigned multiple gene, read assigned gene highest number overlapping nucleotides. read can assigned multiple genes number overlapping nucleotides, read assigned. read--gene assignment, per gene UMI count matrix generated. Specifically, gene, reads similar mapping coordinates transcript termination sites (TTS, .e. end read polyT polyA) grouped together. UMIs reads group collapsed generate UMI counts gene. Finally, new fastq file deduplicated reads keeping longest read UMI.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcript quantification — quantify_transcript","title":"Transcript quantification — quantify_transcript","text":"Calculate transcript count matrix parsing re-alignment file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcript quantification — quantify_transcript","text":"","code":"quantify_transcript(   annotation,   outdir,   config,   pipeline = \"sc_single_sample\",   ... )"},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transcript quantification — quantify_transcript","text":"annotation file path annotation file GFF3 format outdir path directory store output files. config Parsed FLAMES configurations. pipeline pipeline type character string, either sc_single_sample (single-cell, single-sample), ... Supply sample names character vector (e.g. samples = c(\"name1\", \"name2\", ...)) muti-sample bulk pipeline. bulk (bulk, single multi-sample), sc_multi_sample (single-cell, multiple samples)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transcript quantification — quantify_transcript","text":"SingleCellExperiment object single-cell pipeline, list SingleCellExperiment objects multi-sample pipeline, SummarizedExperiment object bulk pipeline.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcript quantification — quantify_transcript","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] outdir <- tempfile() dir.create(outdir) fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   exon. This information was ignored. #> OK config <- jsonlite::fromJSON(create_config(outdir, bambu_isoform_identification = TRUE, min_tr_coverage = 0.1, min_read_coverage = 0.1, min_sup_cnt = 1)) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a69a0fa68/config_file_7722.json  file.copy(annotation, file.path(outdir, \"isoform_annotated.gtf\")) #> [1] TRUE if (FALSE) { # \\dontrun{ if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   minimap2_realign(     config = config, outdir = outdir,     fq_in = fastq1   )   quantify_transcript_flames(annotation, outdir, config, pipeline = \"bulk\") } } # }"},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript_flames.html","id":null,"dir":"Reference","previous_headings":"","what":"FLAMES Transcript quantification — quantify_transcript_flames","title":"FLAMES Transcript quantification — quantify_transcript_flames","text":"Calculate transcript count matrix parsing re-alignment file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript_flames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLAMES Transcript quantification — quantify_transcript_flames","text":"","code":"quantify_transcript_flames(   annotation,   outdir,   config,   pipeline = \"sc_single_sample\",   samples )"},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript_flames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FLAMES Transcript quantification — quantify_transcript_flames","text":"annotation file path annotation file GFF3 format outdir path directory store output files. config Parsed FLAMES configurations. pipeline pipeline type character string, either sc_single_sample (single-cell, single-sample), samples vector sample names, required sc_multi_sample pipeline. bulk (bulk, single multi-sample), sc_multi_sample (single-cell, multiple samples)","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript_flames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FLAMES Transcript quantification — quantify_transcript_flames","text":"SingleCellExperiment object single-cell pipeline, list SingleCellExperiment objects multi-sample pipeline, SummarizedExperiment object bulk pipeline.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/quantify_transcript_flames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLAMES Transcript quantification — quantify_transcript_flames","text":"","code":"temp_path <- tempfile() bfc <- BiocFileCache::BiocFileCache(temp_path, ask = FALSE) file_url <- \"https://raw.githubusercontent.com/OliverVoogd/FLAMESData/master/data\" fastq1 <- bfc[[names(BiocFileCache::bfcadd(bfc, \"Fastq1\", paste(file_url, \"fastq/sample1.fastq.gz\", sep = \"/\")))]] genome_fa <- bfc[[names(BiocFileCache::bfcadd(bfc, \"genome.fa\", paste(file_url, \"SIRV_isoforms_multi-fasta_170612a.fasta\", sep = \"/\")))]] annotation <- bfc[[names(BiocFileCache::bfcadd(bfc, \"annot.gtf\", paste(file_url, \"SIRV_isoforms_multi-fasta-annotation_C_170612a.gtf\", sep = \"/\")))]] outdir <- tempfile() dir.create(outdir) fasta <- annotation_to_fasta(annotation, genome_fa, outdir) #> Import genomic features from the file as a GRanges object ...  #> OK #> Prepare the 'metadata' data frame ...  #> OK #> Make the TxDb object ...  #> Warning: The \"phase\" metadata column contains non-NA values for features of type #>   exon. This information was ignored. #> OK config <- jsonlite::fromJSON(create_config(outdir, bambu_isoform_identification = TRUE, min_tr_coverage = 0.1, min_read_coverage = 0.1, min_sup_cnt = 1)) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a42bf7dab/config_file_7722.json  file.copy(annotation, file.path(outdir, \"isoform_annotated.gtf\")) #> [1] TRUE if (FALSE) { # \\dontrun{ if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   minimap2_realign(     config = config, outdir = outdir,     fq_in = fastq1   )   quantify_transcript_flames(annotation, outdir, config, pipeline = \"bulk\") } } # }"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"Chi-square based differential transcription usage analysis. variant meant single cell data. Takes SingleCellExperiment object sc_long_pipeline input. Alternatively, path output folder provided instead SCE object.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"","code":"sc_DTU_analysis(sce, min_count = 15)"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"sce SingleCellExperiment object sc_long_pipeline, following metadata: file required output folder SCE object. min_count minimum UMI count threshold filtering isoforms.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"data.frame containing following columns: gene_id - differentially transcribed genes X_value - X value DTU gene df - degrees freedom approximate chi-squared distribution test statistic DTU_tr - transcript_id highest squared residuals DTU_group - cell group highest squared residuals p_value - p-value test adj_p - adjusted p-value (Benjamini–Hochberg correction) table sorted decreasing P-values. also saved sc_DTU_analysis.csv output folder.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"function search genes least two isoforms, min_count UMI counts. gene, per cell transcript counts merged group generate pseudo bulk samples. Grouping specified colLabels SCE object. top 2 highly expressed transcripts group selected UMI count matrix rows selected transcripts columns groups used input chi-square test independence (chisq.test). Adjusted P-values calculated Benjamini–Hochberg correction.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_DTU_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FLAMES Differential Transcript Usage Analysis — sc_DTU_analysis","text":"","code":"outdir <- tempfile() dir.create(outdir) bc_allow <- file.path(outdir, \"bc_allow.tsv\") genome_fa <- file.path(outdir, \"rps24.fa\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) R.utils::gunzip(   filename = system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"),   destname = genome_fa, remove = FALSE )  sce <- FLAMES::sc_long_pipeline(   genome_fa = genome_fa,   fastq = system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),   annotation = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),   outdir = outdir,   barcodes_file = bc_allow,   config_file = create_config(outdir, oarfish_quantification = FALSE) ) #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a4f6c075d/config_file_7722.json  #> Configured to use 8 cores, detected 4  #> 03:16:19 AM Wed Oct 16 2024 Start running #> 03:16:19 AM Wed Oct 16 2024 Demultiplexing using flexiplex... #> Matching cell barcodes... #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a4f6c075d/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /__w/_temp/Library/FLAMES/extdata/fastq/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done! #> 03:16:20 AM Wed Oct 16 2024 Demultiplex done #> Running FLAMES pipeline... #> #### Input parameters: #> { #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [8], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [false] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [false] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }  #> gene annotation: /__w/_temp/Library/FLAMES/extdata/rps24.gtf.gz  #> genome fasta: /tmp/Rtmprnnob2/file1e2a4f6c075d/rps24.fa  #> input fastq: /tmp/Rtmprnnob2/file1e2a4f6c075d/matched_reads.fastq  #> output directory: /tmp/Rtmprnnob2/file1e2a4f6c075d  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> 03:16:20 AM Wed Oct 16 2024 minimap2_align #> 03:16:20 AM Wed Oct 16 2024 Start gene quantification and UMI deduplication #> 03:16:20 AM Wed Oct 16 2024 quantify genes  #> Found genome alignment file(s): \talign2genome.bam #> 03:16:20 AM Wed Oct 16 2024 Gene quantification and UMI deduplication done! #> 03:16:20 AM Wed Oct 16 2024 Start isoform identificaiton #> 03:16:20 AM Wed Oct 16 2024 find_isoform #> 03:16:20 AM Wed Oct 16 2024 Isoform identificaiton done #> #### Realigning deduplicated reads to transcript using minimap2 #> 03:16:20 AM Wed Oct 16 2024 minimap2_realign #> Sorting by position #> #### Generating transcript count matrix #> 03:16:20 AM Wed Oct 16 2024 quantify transcripts  #> Found realignment file(s): \trealign2transcript.bam group_anno <- data.frame(barcode_seq = colnames(sce), groups = SingleCellExperiment::counts(sce)[\"ENSMUST00000169826.2\", ] > 1) SingleCellExperiment::colLabels(sce) <- group_anno$groups sc_DTU_analysis(sce, min_count = 1) #> Loading isoform_FSM_annotation.csv ... #> Selecting transcript_ids with full splice match ... #> Summing transcripts with same FSM ...  #> Creating FSM_count.csv.gz ... #> /tmp/Rtmprnnob2/file1e2a4f6c075d/FSM_count.csv.gz saved. #> \t 7 FSM_match(s) found. #> Filtering for genes with at least 2 detected isforms ...      7 FSM_match(s) left. #> Keeping only the top 4 expressed FSM_matches for each gene ...      4 FSM_match(s) left. #> Aggregating counts by cluster labels ... #> Filtering isoforms ... 4  transcript_id(s) remaining. #> Performing Chi-square tests ... #> Warning: Chi-squared approximation(s) may be incorrect #> Results saved to  /tmp/Rtmprnnob2/file1e2a4f6c075d/sc_DTU_analysis.csv  #>                         gene_id  X_value df                          DTU_tr #> X-squared ENSMUSG00000025290.17 18.68861  3 ENSMUSG00000025290.17_19_5159_1 #>           DTU_group      p_value        adj_p #> X-squared     FALSE 0.0003170706 0.0003170706"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute missing transcript counts — sc_impute_transcript","title":"Impute missing transcript counts — sc_impute_transcript","text":"Impute missing transcript counts using shared nearest neighbor graph","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute missing transcript counts — sc_impute_transcript","text":"","code":"sc_impute_transcript(combined_sce, dimred = \"PCA\", ...)"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute missing transcript counts — sc_impute_transcript","text":"combined_sce SingleCellExperiment object gene counts \"transcript\" altExp slot. dimred name reduced dimension use building shared nearest neighbor graph. ... Additional arguments pass scran::buildSNNGraph. E.g. k = 30.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute missing transcript counts — sc_impute_transcript","text":"SingleCellExperiment object imputed logcounts assay \"transcript\" altExp slot.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Impute missing transcript counts — sc_impute_transcript","text":"cells NA values \"transcript\" altExp slot, function imputes missing values cells non-missing values. shared nearest neighbor graph built using reduced dimensions SingleCellExperiment object, imputation done imputed value cell weighted sum transcript counts neighbors. Imputed values stored \"logcounts\" assay \"transcript\" altExp slot. \"counts\" assay used obtain logcounts left unchanged.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_impute_transcript.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute missing transcript counts — sc_impute_transcript","text":"","code":"sce <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = matrix(rpois(50, 5), ncol = 10))) long_read <- SingleCellExperiment::SingleCellExperiment(assays = list(counts = matrix(rpois(40, 5), ncol = 10))) SingleCellExperiment::altExp(sce, \"transcript\") <- long_read SingleCellExperiment::counts(SingleCellExperiment::altExp(sce))[,1:2] <- NA SingleCellExperiment::counts(SingleCellExperiment::altExp(sce)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]   NA   NA    4    4    9    7    6    7    5     1 #> [2,]   NA   NA    5    4    9    6    4    6    5     5 #> [3,]   NA   NA    5    5    9    3    7    8    4     2 #> [4,]   NA   NA    5    6    2    6    5    7    7     6 imputed_sce <- sc_impute_transcript(sce, k = 4) #> Warning: more singular values/vectors requested than available #> Warning: You're computing too large a percentage of total singular values, use a standard svd instead. #> Imputing transcript counts ... SingleCellExperiment::logcounts(SingleCellExperiment::altExp(imputed_sce)) #> 4 x 10 Matrix of class \"dgeMatrix\" #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7]     [,8] #> [1,] 2.606167 2.387593 2.479993 2.479993 2.954196 2.985583 2.793234 2.686501 #> [2,] 2.686290 2.757838 2.749252 2.479993 2.954196 2.793234 2.308753 2.500984 #> [3,] 2.567505 2.568373 2.749252 2.749252 2.954196 1.987652 2.985583 2.850857 #> [4,] 2.656247 2.721574 2.749252 2.976074 1.321928 2.793234 2.571236 2.686501 #>          [,9]    [,10] #> [1,] 2.627273 1.352516 #> [2,] 2.627273 3.132224 #> [3,] 2.362570 2.038135 #> [4,] 3.044394 3.367571"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"Semi-supervised isoform detection annotation long read data. variant multi-sample single cell data. default, pipeline demultiplexes input fastq data (match_cell_barcode = TRUE). Specific parameters relating analysis can changed either function arguments, configuration JSON file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"","code":"sc_long_multisample_pipeline(   annotation,   fastqs,   outdir,   genome_fa,   minimap2 = NULL,   k8 = NULL,   barcodes_file = NULL,   expect_cell_numbers = NULL,   config_file = NULL )"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"annotation file path annotation file GFF3 format fastqs input fastq files multiple samples. named vector file paths (eithr FASTQ files directories containing FASTQ files). names vector used sample names. outdir path directory store output files. genome_fa file path genome fasta file. minimap2 Path minimap2, PATH. required either do_genome_align do_read_realign TRUE. k8 Path k8 Javascript shell binary. required do_genome_align TRUE. barcodes_file file path reference csv used demultiplexing flexiplex. specified, demultiplexing performed using BLAZE. Default NULL. expect_cell_numbers vector roughly expected numbers cells sample E.g., targeted number cells. Required using BLAZE demultiplexing, specifically, do_barcode_demultiplex TRUE JSON configuration file barcodes_file specified. Default NULL. config_file File path JSON configuration file. specified, config_file overrides configuration parameters","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"\"do_transcript_quantification\" set true, list two elements: metadata list metadata pipeline run. sces list SingleCellExperiment objects, one sample.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"default FLAMES use minimap2 read alignment. genome alignment step (do_genome_align), FLAMES summarizes alignment read every sample grouping reads similar splice junctions get raw isoform annotation (do_isoform_id). raw isoform annotation compared reference annotation correct potential splice site transcript start/end errors. Transcripts similar splice junctions transcript start/end reference transcript merged reference. process also collapse isoforms likely truncated transcripts. isoform_id_bambu set TRUE, bambu::bambu used generate updated annotations (implemented multi-sample yet). Next read realignment step (do_read_realign), sequence transcript update annotation extracted, reads realigned updated transcript_assembly.fa minimap2. transcripts full-length aligned reads discarded (implemented multi-sample yet). reads assigned transcripts based alignment score, fractions reads aligned transcript coverage. Reads uniquely assigned transcripts low transcript coverage discarded. UMI transcript count matrix generated collapsing reads UMI similar way done short-read scRNA-seq data, allowing edit distance 2 default. parameters, minimal distance splice site minimal percentage transcript coverage can modified JSON configuration file (config_file). default parameters can changed either function arguments configuration JSON file config_file. pipeline_parameters section specifies steps executed pipeline - default, steps executed. isoform_parameters section affects isoform detection - key parameters include: Min_sup_cnt causes transcripts less reads aligned value discarded MAX_TS_DIST merges transcripts intron chain TSS/TES distace less MAX_TS_DIST strand_specific specifies reads strand mRNA (1), reverse complemented (-1) strand specific (0), results strand information based reference annotation.","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_multisample_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline for Multi-sample Single Cell Data — sc_long_multisample_pipeline","text":"","code":"reads <- ShortRead::readFastq(   system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\") ) outdir <- tempfile() dir.create(outdir) dir.create(file.path(outdir, \"fastq\")) bc_allow <- file.path(outdir, \"bc_allow.tsv\") genome_fa <- file.path(outdir, \"rps24.fa\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) R.utils::gunzip(   filename = system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"),   destname = genome_fa, remove = FALSE ) ShortRead::writeFastq(reads[1:100],   file.path(outdir, \"fastq/sample1.fq.gz\"), mode = \"w\", full = FALSE) reads <- reads[-(1:100)] ShortRead::writeFastq(reads[1:100],   file.path(outdir, \"fastq/sample2.fq.gz\"), mode = \"w\", full = FALSE) reads <- reads[-(1:100)] ShortRead::writeFastq(reads,   file.path(outdir, \"fastq/sample3.fq.gz\"), mode = \"w\", full = FALSE)  sce_list <- FLAMES::sc_long_multisample_pipeline(   annotation = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),   fastqs = c(\"sampleA\" = file.path(outdir, \"fastq\"),     \"sample1\" = file.path(outdir, \"fastq\", \"sample1.fq.gz\"),     \"sample2\" = file.path(outdir, \"fastq\", \"sample2.fq.gz\"),     \"sample3\" = file.path(outdir, \"fastq\", \"sample3.fq.gz\")),   outdir = outdir,   genome_fa = genome_fa,   barcodes_file = rep(bc_allow, 4) ) #> No config file provided, creating a default config in /tmp/Rtmprnnob2/file1e2a3e058048  #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a3e058048/config_file_7722.json  #> Configured to use 8 cores, detected 4  #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a3e058048/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample1.fq.gz #> Searching for barcodes... #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample2.fq.gz #> Searching for barcodes... #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample3.fq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done! #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a3e058048/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample1.fq.gz #> Searching for barcodes... #> Number of reads processed: 100 #> Number of reads where at least one barcode was found: 92 #> Number of reads with exactly one barcode match: 91 #> Number of chimera reads: 1 #> All done! #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a3e058048/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample2.fq.gz #> Searching for barcodes... #> Number of reads processed: 100 #> Number of reads where at least one barcode was found: 95 #> Number of reads with exactly one barcode match: 94 #> Number of chimera reads: 0 #> All done! #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a3e058048/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /tmp/Rtmprnnob2/file1e2a3e058048/fastq/sample3.fq.gz #> Searching for barcodes... #> Number of reads processed: 193 #> Number of reads where at least one barcode was found: 181 #> Number of reads with exactly one barcode match: 179 #> Number of chimera reads: 0 #> All done! #> Running FLAMES pipeline... #> #### Input parameters: #> { #>   \"comment\": [\"this is the default config for nanopore single cell long read data using 10x 3'end kit. use splice annotation in alignment. \"], #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [8], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [true] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [false] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }gene annotation: /__w/_temp/Library/FLAMES/extdata/rps24.gtf.gz  #> genome fasta: /tmp/Rtmprnnob2/file1e2a3e058048/rps24.fa  #> input fastqs: /tmp/Rtmprnnob2/file1e2a3e058048/sampleA_matched_reads.fastq #>  /tmp/Rtmprnnob2/file1e2a3e058048/sample1_matched_reads.fastq #>  /tmp/Rtmprnnob2/file1e2a3e058048/sample2_matched_reads.fastq #>  /tmp/Rtmprnnob2/file1e2a3e058048/sample3_matched_reads.fastq #>   #> output directory: /tmp/Rtmprnnob2/file1e2a3e058048  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> \tAligning sample  sampleA ... #> 03:16:25 AM Wed Oct 16 2024 minimap2_align #> \tAligning sample  sample1 ... #> 03:16:25 AM Wed Oct 16 2024 minimap2_align #> \tAligning sample  sample2 ... #> 03:16:25 AM Wed Oct 16 2024 minimap2_align #> \tAligning sample  sample3 ... #> 03:16:25 AM Wed Oct 16 2024 minimap2_align #> 03:16:25 AM Wed Oct 16 2024 quantify genes  #> Found genome alignment file(s): \tsample1_align2genome.bam #> \tsample2_align2genome.bam #> \tsample3_align2genome.bam #> \tsampleA_align2genome.bam #> 03:16:26 AM Wed Oct 16 2024 find_isoform #> #### Realign to transcript using minimap2 #> \tRealigning sample  sampleA ... #> 03:16:26 AM Wed Oct 16 2024 minimap2_realign #> Sorting by  CB  #> \tRealigning sample  sample1 ... #> 03:16:27 AM Wed Oct 16 2024 minimap2_realign #> Sorting by  CB  #> \tRealigning sample  sample2 ... #> 03:16:27 AM Wed Oct 16 2024 minimap2_realign #> Sorting by  CB  #> \tRealigning sample  sample3 ... #> 03:16:27 AM Wed Oct 16 2024 minimap2_realign #> Sorting by  CB  #> #### Generating transcript count matrix"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipeline for Single Cell Data — sc_long_pipeline","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"Semi-supervised isoform detection annotation long read data. variant single cell data. default, pipeline demultiplexes input fastq data (match_cell_barcode = TRUE). Specific parameters relating analysis can changed either function arguments, configuration JSON file.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"","code":"sc_long_pipeline(   annotation,   fastq,   genome_bam = NULL,   outdir,   genome_fa,   minimap2 = NULL,   k8 = NULL,   barcodes_file = NULL,   expect_cell_number = NULL,   config_file = NULL )"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"annotation file path annotation file GFF3 format fastq file path input fastq file genome_bam Optional file path bam file use instead fastq file (skips initial alignment step) outdir path directory store output files. genome_fa file path genome fasta file. minimap2 Path minimap2, PATH. required either do_genome_align do_read_realign TRUE. k8 Path k8 Javascript shell binary. required do_genome_align TRUE. barcodes_file file path reference csv used demultiplexing flexiplex. specified, demultiplexing performed using BLAZE. Default NULL. expect_cell_number Expected number cells identifying barcode list BLAZE. just rough estimate. E.g., targeted number cells. Required do_barcode_demultiplex TRUE JSON configuration file barcodes_file specified. Default NULL. config_file File path JSON configuration file. specified, config_file overrides configuration parameters","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"do_transcript_quantification set true, sc_long_pipeline returns SingleCellExperiment object, containing count matrix assay, gene annotations metadata, well list output files generated pipeline. pipeline also outputs number output files given outdir directory. output files generated pipeline : transcript_count.csv.gz - transcript count matrix (also contained SingleCellExperiment) isoform_annotated.filtered.gff3 - isoforms gff3 format (also contained SingleCellExperiment) transcript_assembly.fa - transcript sequence isoforms align2genome.bam - sorted BAM file reads aligned genome realign2transcript.bam - sorted realigned BAM file using transcript_assembly.fa reference tss_tes.bedgraph - TSS TES enrichment reads (QC) do_transcript_quantification set false, nothing returned","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"default FLAMES use minimap2 read alignment. genome alignment step (do_genome_align), FLAMES summarizes alignment read grouping reads similar splice junctions get raw isoform annotation (do_isoform_id). raw isoform annotation compared reference annotation correct potential splice site transcript start/end errors. Transcripts similar splice junctions transcript start/end reference transcript merged reference. process also collapse isoforms likely truncated transcripts. isoform_id_bambu set TRUE, bambu::bambu used generate updated annotations. Next read realignment step (do_read_realign), sequence transcript update annotation extracted, reads realigned updated transcript_assembly.fa minimap2. transcripts full-length aligned reads discarded. reads assigned transcripts based alignment score, fractions reads aligned transcript coverage. Reads uniquely assigned transcripts low transcript coverage discarded. UMI transcript count matrix generated collapsing reads UMI similar way done short-read scRNA-seq data, allowing edit distance 2 default. parameters, minimal distance splice site minimal percentage transcript coverage can modified JSON configuration file (config_file). default parameters can changed either function arguments configuration JSON file config_file. pipeline_parameters section specifies steps executed pipeline - default, steps executed. isoform_parameters section affects isoform detection - key parameters include: Min_sup_cnt causes transcripts less reads aligned value discarded MAX_TS_DIST merges transcripts intron chain TSS/TES distace less MAX_TS_DIST strand_specific specifies reads strand mRNA (1), reverse complemented (-1) strand specific (0), results strand information based reference annotation.","code":""},{"path":[]},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_long_pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pipeline for Single Cell Data — sc_long_pipeline","text":"","code":"outdir <- tempfile() dir.create(outdir) bc_allow <- file.path(outdir, \"bc_allow.tsv\") genome_fa <- file.path(outdir, \"rps24.fa\") R.utils::gunzip(   filename = system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),   destname = bc_allow, remove = FALSE ) R.utils::gunzip(   filename = system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"),   destname = genome_fa, remove = FALSE ) if (!any(is.na(find_bin(c(\"minimap2\", \"k8\"))))) {   sce <- FLAMES::sc_long_pipeline(     genome_fa = genome_fa,     fastq = system.file(\"extdata\", \"fastq\", \"musc_rps24.fastq.gz\", package = \"FLAMES\"),     annotation = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),     outdir = outdir,     barcodes_file = bc_allow   ) } #> No config file provided, creating a default config in /tmp/Rtmprnnob2/file1e2a7cc9725f  #> Writing configuration parameters to:  /tmp/Rtmprnnob2/file1e2a7cc9725f/config_file_7722.json  #> Configured to use 8 cores, detected 4  #> 03:16:30 AM Wed Oct 16 2024 Start running #> 03:16:30 AM Wed Oct 16 2024 Demultiplexing using flexiplex... #> Matching cell barcodes... #> FLEXIPLEX 0.96.2 #> Setting max barcode edit distance to 2 #> Setting max flanking sequence edit distance to 8 #> Setting read IDs to be  replaced #> Setting number of threads to 8 #> Search pattern:  #> primer: CTACACGACGCTCTTCCGATCT #> BC: NNNNNNNNNNNNNNNN #> UMI: NNNNNNNNNNNN #> polyT: TTTTTTTTT #> Setting known barcodes from /tmp/Rtmprnnob2/file1e2a7cc9725f/bc_allow.tsv #> Number of known barcodes: 143 #> Processing file: /__w/_temp/Library/FLAMES/extdata/fastq/musc_rps24.fastq.gz #> Searching for barcodes... #> Number of reads processed: 393 #> Number of reads where at least one barcode was found: 368 #> Number of reads with exactly one barcode match: 364 #> Number of chimera reads: 1 #> All done! #> 03:16:30 AM Wed Oct 16 2024 Demultiplex done #> Running FLAMES pipeline... #> #### Input parameters: #> { #>   \"comment\": [\"this is the default config for nanopore single cell long read data using 10x 3'end kit. use splice annotation in alignment. \"], #>   \"pipeline_parameters\": { #>     \"seed\": [2022], #>     \"threads\": [8], #>     \"do_barcode_demultiplex\": [true], #>     \"do_gene_quantification\": [true], #>     \"do_genome_alignment\": [true], #>     \"do_isoform_identification\": [true], #>     \"bambu_isoform_identification\": [false], #>     \"multithread_isoform_identification\": [false], #>     \"do_read_realignment\": [true], #>     \"do_transcript_quantification\": [true], #>     \"oarfish_quantification\": [true] #>   }, #>   \"barcode_parameters\": { #>     \"max_bc_editdistance\": [2], #>     \"max_flank_editdistance\": [8], #>     \"pattern\": { #>       \"primer\": [\"CTACACGACGCTCTTCCGATCT\"], #>       \"BC\": [\"NNNNNNNNNNNNNNNN\"], #>       \"UMI\": [\"NNNNNNNNNNNN\"], #>       \"polyT\": [\"TTTTTTTTT\"] #>     }, #>     \"strand\": [\"-\"], #>     \"TSO_seq\": [\"CCCATGTACTCTGCGTTGATACCACTGCTT\"], #>     \"TSO_prime\": [3], #>     \"full_length_only\": [false] #>   }, #>   \"isoform_parameters\": { #>     \"generate_raw_isoform\": [false], #>     \"max_dist\": [10], #>     \"max_ts_dist\": [100], #>     \"max_splice_match_dist\": [10], #>     \"min_fl_exon_len\": [40], #>     \"max_site_per_splice\": [3], #>     \"min_sup_cnt\": [5], #>     \"min_cnt_pct\": [0.001], #>     \"min_sup_pct\": [0.2], #>     \"bambu_trust_reference\": [true], #>     \"strand_specific\": [0], #>     \"remove_incomp_reads\": [4], #>     \"downsample_ratio\": [1] #>   }, #>   \"alignment_parameters\": { #>     \"use_junctions\": [true], #>     \"no_flank\": [false] #>   }, #>   \"realign_parameters\": { #>     \"use_annotation\": [true] #>   }, #>   \"transcript_counting\": { #>     \"min_tr_coverage\": [0.4], #>     \"min_read_coverage\": [0.4] #>   } #> }  #> gene annotation: /__w/_temp/Library/FLAMES/extdata/rps24.gtf.gz  #> genome fasta: /tmp/Rtmprnnob2/file1e2a7cc9725f/rps24.fa  #> input fastq: /tmp/Rtmprnnob2/file1e2a7cc9725f/matched_reads.fastq  #> output directory: /tmp/Rtmprnnob2/file1e2a7cc9725f  #> minimap2 path:  #> k8 path:  #> #### Aligning reads to genome using minimap2 #> 03:16:30 AM Wed Oct 16 2024 minimap2_align #> 03:16:30 AM Wed Oct 16 2024 Start gene quantification and UMI deduplication #> 03:16:30 AM Wed Oct 16 2024 quantify genes  #> Found genome alignment file(s): \talign2genome.bam #> 03:16:31 AM Wed Oct 16 2024 Gene quantification and UMI deduplication done! #> 03:16:31 AM Wed Oct 16 2024 Start isoform identificaiton #> 03:16:31 AM Wed Oct 16 2024 find_isoform #> 03:16:31 AM Wed Oct 16 2024 Isoform identificaiton done #> #### Realigning deduplicated reads to transcript using minimap2 #> 03:16:31 AM Wed Oct 16 2024 minimap2_realign #> Sorting by  CB  #> #### Generating transcript count matrix"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_mutations.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant count for single-cell data — sc_mutations","title":"Variant count for single-cell data — sc_mutations","text":"Count number reads supporting variants given positions cell.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_mutations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant count for single-cell data — sc_mutations","text":"","code":"sc_mutations(   bam_path,   seqnames,   positions,   indel = FALSE,   barcodes,   threads = 1 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_mutations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant count for single-cell data — sc_mutations","text":"bam_path character(1) character(n): path bam file(s) aligned reference genome (transcriptome! Unless postions also transcriptome). seqnames character(n): chromosome names postions count alleles. positions integer(n): positions, 1-based, length seqnames. positions count alleles. indel logical(1): whether count indels (TRUE) SNPs (FALSE). barcodes character(n) bam_path single file, list character(n) bam_path list files paths. cell barcodes count alleles . reads barcodes counted. threads integer(1): number threads use. Maximum number threads number bam files * number positions.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_mutations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variant count for single-cell data — sc_mutations","text":"tibble columns: allele, barcode, allele_count, cell_total_reads, pct, pos, seqname.","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/sc_mutations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variant count for single-cell data — sc_mutations","text":"","code":"outdir <- tempfile() dir.create(outdir) genome_fa <- file.path(outdir, \"rps24.fa\") R.utils::gunzip(   filename = system.file(\"extdata\", \"rps24.fa.gz\", package = \"FLAMES\"),   destname = genome_fa, remove = FALSE ) minimap2_align( # align to genome   config = jsonlite::fromJSON(     system.file(\"extdata\", \"config_sclr_nanopore_3end.json\", package = \"FLAMES\")   ),   fa_file = genome_fa,   fq_in = system.file(\"extdata\", \"fastq\", \"demultiplexed.fq.gz\", package = \"FLAMES\"),   annot = system.file(\"extdata\", \"rps24.gtf.gz\", package = \"FLAMES\"),   outdir = outdir ) #> 03:16:32 AM Wed Oct 16 2024 minimap2_align #>                                                   total mapped primary #> /tmp/Rtmprnnob2/file1e2a43ea49e1/align2genome.bam    10     10      10 #>                                                   secondary #> /tmp/Rtmprnnob2/file1e2a43ea49e1/align2genome.bam         0 snps_tb <- sc_mutations(   bam_path = file.path(outdir, \"align2genome.bam\"),   seqnames = c(\"chr14\", \"chr14\"),   positions = c(1260, 2714), # positions of interest   indel = FALSE,   barcodes = read.delim(     system.file(\"extdata\", \"bc_allow.tsv.gz\", package = \"FLAMES\"),     header = FALSE)$V1 ) #> 03:16:32 Got 1 bam file, parallelizing over each position ... #> 03:16:32 Merging results ... head(snps_tb) #> # A tibble: 6 × 7 #>   allele barcode          allele_count cell_total_reads   pct   pos seqname #>   <chr>  <chr>                   <dbl>            <dbl> <dbl> <dbl> <chr>   #> 1 A      TTTATGCAGACTAGAT            0                1     0  1260 chr14   #> 2 A      TTGTAGGTCTTACCTA            0                0   NaN  1260 chr14   #> 3 A      TTGACTTGTGGCGAAT            0                0   NaN  1260 chr14   #> 4 A      TTCGGTCGTGCTGTAT            0                0   NaN  1260 chr14   #> 5 A      TTAACTCGTCACAAGG            0                0   NaN  1260 chr14   #> 6 A      TGGCGCAGTACGCACC            0                0   NaN  1260 chr14   snps_tb |>   dplyr::filter(pos == 1260) |>   dplyr::group_by(allele) |>   dplyr::summarise(count = sum(allele_count)) # should be identical to samtools pileup #> # A tibble: 5 × 2 #>   allele count #>   <chr>  <dbl> #> 1 A          3 #> 2 C          0 #> 3 G          6 #> 4 T          0 #> 5 del        1"},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10.html","id":null,"dir":"Reference","previous_headings":"","what":"scMixology short-read gene counts - sample 2 — scmixology_lib10","title":"scMixology short-read gene counts - sample 2 — scmixology_lib10","text":"Short-read gene counts long short-read single cell RNA-seq profiling human  lung adenocarcinoma cell lines using 10X version 2 chemstry. See Tian, L. et al. Comprehensive characterization single-cell full-length isoforms human mouse long-read sequencing. Genome Biology 22, 310 (2021).","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scMixology short-read gene counts - sample 2 — scmixology_lib10","text":"","code":"scmixology_lib10"},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scMixology short-read gene counts - sample 2 — scmixology_lib10","text":"## `scmixology_lib10` SingleCellExperiment 7,240 rows 60 columns:","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scMixology short-read gene counts - sample 2 — scmixology_lib10","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE154869>","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10_transcripts.html","id":null,"dir":"Reference","previous_headings":"","what":"scMixology long-read transcript counts - sample 2 — scmixology_lib10_transcripts","title":"scMixology long-read transcript counts - sample 2 — scmixology_lib10_transcripts","text":"long-read transcript counts long short-read single cell RNA-seq profiling human  lung adenocarcinoma cell lines using 10X version 2 chemstry. See Tian, L. et al. Comprehensive characterization single-cell full-length isoforms human mouse long-read sequencing. Genome Biology 22, 310 (2021).","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10_transcripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scMixology long-read transcript counts - sample 2 — scmixology_lib10_transcripts","text":"","code":"scmixology_lib10_transcripts"},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10_transcripts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scMixology long-read transcript counts - sample 2 — scmixology_lib10_transcripts","text":"## `scmixology_lib10_transcripts` SingleCellExperiment 7,240 rows 60 columns:","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib10_transcripts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scMixology long-read transcript counts - sample 2 — scmixology_lib10_transcripts","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE154869>","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib90.html","id":null,"dir":"Reference","previous_headings":"","what":"scMixology short-read gene counts - sample 1 — scmixology_lib90","title":"scMixology short-read gene counts - sample 1 — scmixology_lib90","text":"Short-read single cell RNA-seq profiling human lung adenocarcinoma cell lines using 10X version 2 chemstry. Single cells five human lung adenocarcinoma cell lines (H2228, H1975, A549, H838 HCC827) mixed equal proportions processed using Chromium 10X platform, sequenced using Illumina HiSeq 2500. See Tian L, Dong X, Freytag S, Lê Cao KA et al. Benchmarking single cell RNA-sequencing analysis pipelines using mixture control experiments. Nat Methods 2019 Jun;16(6):479-487. PMID: 31133762","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib90.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scMixology short-read gene counts - sample 1 — scmixology_lib90","text":"","code":"scmixology_lib90"},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib90.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scMixology short-read gene counts - sample 1 — scmixology_lib90","text":"## `scmixology_lib90` SingleCellExperiment","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/scmixology_lib90.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scMixology short-read gene counts - sample 1 — scmixology_lib90","text":"<https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126906>","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/weight_transcripts.html","id":null,"dir":"Reference","previous_headings":"","what":"Weight transcripts by read counts — weight_transcripts","title":"Weight transcripts by read counts — weight_transcripts","text":"Given vector read counts, return vector weights. weights either read counts (type = 'counts'), binary vector 0s 1s 1s assigned transcripts read counts threshold (type = 'equal', min_counts = 1000), sigmoid function read counts (type = 'sigmoid'). sigmoid function defined 1 / (1 + exp(-steepness/inflection * (x - inflection))).","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/weight_transcripts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weight transcripts by read counts — weight_transcripts","text":"","code":"weight_transcripts(   counts,   type = \"sigmoid\",   min_counts = 1000,   inflection_idx = 10,   inflection_max = 1000,   steepness = 5 )"},{"path":"https://mritchielab.github.io/FLAMES/reference/weight_transcripts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weight transcripts by read counts — weight_transcripts","text":"counts numeric vector read counts type string, one 'counts', 'sigmoid', 'equal' min_counts numeric, threshold 'equal' type inflection_idx numeric, index read counts determine inflection point sigmoid function. default 10, .e. 10th highest read count inflection point. inflection_max numeric, maximum value inflection point. inflection point according inflection_idx higher value, inflection point set value instead. steepness numeric, steepness sigmoid function","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/weight_transcripts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weight transcripts by read counts — weight_transcripts","text":"numeric vector weights","code":""},{"path":"https://mritchielab.github.io/FLAMES/reference/weight_transcripts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weight transcripts by read counts — weight_transcripts","text":"","code":"weight_transcripts(1:2000) #>    [1] 0.006726173 0.006759661 0.006793313 0.006827132 0.006861119 0.006895273 #>    [7] 0.006929596 0.006964089 0.006998753 0.007033587 0.007068594 0.007103774 #>   [13] 0.007139127 0.007174656 0.007210359 0.007246240 0.007282297 0.007318533 #>   [19] 0.007354947 0.007391541 0.007428316 0.007465273 0.007502412 0.007539735 #>   [25] 0.007577241 0.007614933 0.007652811 0.007690876 0.007729129 0.007767570 #>   [31] 0.007806201 0.007845023 0.007884036 0.007923242 0.007962641 0.008002235 #>   [37] 0.008042024 0.008082009 0.008122191 0.008162571 0.008203151 0.008243930 #>   [43] 0.008284911 0.008326093 0.008367479 0.008409068 0.008450862 0.008492863 #>   [49] 0.008535070 0.008577485 0.008620110 0.008662944 0.008705989 0.008749246 #>   [55] 0.008792716 0.008836400 0.008880300 0.008924415 0.008968748 0.009013299 #>   [61] 0.009058069 0.009103059 0.009148271 0.009193705 0.009239363 0.009285246 #>   [67] 0.009331354 0.009377689 0.009424252 0.009471044 0.009518066 0.009565319 #>   [73] 0.009612804 0.009660523 0.009708476 0.009756666 0.009805092 0.009853756 #>   [79] 0.009902659 0.009951802 0.010001187 0.010050814 0.010100685 0.010150801 #>   [85] 0.010201163 0.010251772 0.010302630 0.010353738 0.010405096 0.010456706 #>   [91] 0.010508570 0.010560688 0.010613062 0.010665693 0.010718582 0.010771730 #>   [97] 0.010825139 0.010878810 0.010932744 0.010986943 0.011041407 0.011096138 #>  [103] 0.011151137 0.011206406 0.011261946 0.011317758 0.011373843 0.011430203 #>  [109] 0.011486839 0.011543752 0.011600945 0.011658417 0.011716170 0.011774206 #>  [115] 0.011832526 0.011891132 0.011950024 0.012009204 0.012068674 0.012128435 #>  [121] 0.012188488 0.012248835 0.012309477 0.012370415 0.012431651 0.012493186 #>  [127] 0.012555022 0.012617161 0.012679603 0.012742349 0.012805403 0.012868764 #>  [133] 0.012932435 0.012996417 0.013060711 0.013125318 0.013190241 0.013255481 #>  [139] 0.013321040 0.013386918 0.013453117 0.013519640 0.013586486 0.013653659 #>  [145] 0.013721159 0.013788989 0.013857148 0.013925640 0.013994466 0.014063627 #>  [151] 0.014133125 0.014202961 0.014273138 0.014343656 0.014414518 0.014485724 #>  [157] 0.014557277 0.014629178 0.014701429 0.014774032 0.014846987 0.014920298 #>  [163] 0.014993965 0.015067990 0.015142375 0.015217121 0.015292231 0.015367706 #>  [169] 0.015443547 0.015519757 0.015596336 0.015673288 0.015750613 0.015828314 #>  [175] 0.015906392 0.015984848 0.016063686 0.016142905 0.016222509 0.016302499 #>  [181] 0.016382877 0.016463645 0.016544804 0.016626356 0.016708304 0.016790648 #>  [187] 0.016873391 0.016956536 0.017040082 0.017124033 0.017208391 0.017293157 #>  [193] 0.017378332 0.017463920 0.017549922 0.017636340 0.017723176 0.017810432 #>  [199] 0.017898109 0.017986210 0.018074737 0.018163691 0.018253075 0.018342891 #>  [205] 0.018433140 0.018523825 0.018614948 0.018706510 0.018798514 0.018890962 #>  [211] 0.018983856 0.019077197 0.019170989 0.019265233 0.019359930 0.019455085 #>  [217] 0.019550697 0.019646770 0.019743305 0.019840306 0.019937773 0.020035709 #>  [223] 0.020134116 0.020232997 0.020332353 0.020432187 0.020532501 0.020633297 #>  [229] 0.020734578 0.020836345 0.020938600 0.021041347 0.021144587 0.021248323 #>  [235] 0.021352556 0.021457290 0.021562526 0.021668266 0.021774514 0.021881271 #>  [241] 0.021988540 0.022096322 0.022204621 0.022313439 0.022422777 0.022532639 #>  [247] 0.022643027 0.022753943 0.022865390 0.022977370 0.023089885 0.023202938 #>  [253] 0.023316532 0.023430668 0.023545349 0.023660578 0.023776357 0.023892689 #>  [259] 0.024009577 0.024127021 0.024245026 0.024363594 0.024482727 0.024602428 #>  [265] 0.024722700 0.024843544 0.024964964 0.025086962 0.025209541 0.025332703 #>  [271] 0.025456451 0.025580788 0.025705716 0.025831239 0.025957357 0.026084075 #>  [277] 0.026211395 0.026339320 0.026467852 0.026596994 0.026726748 0.026857119 #>  [283] 0.026988107 0.027119717 0.027251951 0.027384811 0.027518301 0.027652422 #>  [289] 0.027787179 0.027922574 0.028058609 0.028195288 0.028332613 0.028470588 #>  [295] 0.028609214 0.028748496 0.028888435 0.029029036 0.029170300 0.029312231 #>  [301] 0.029454831 0.029598104 0.029742053 0.029886680 0.030031988 0.030177981 #>  [307] 0.030324662 0.030472033 0.030620098 0.030768859 0.030918320 0.031068484 #>  [313] 0.031219354 0.031370932 0.031523223 0.031676228 0.031829952 0.031984397 #>  [319] 0.032139567 0.032295465 0.032452093 0.032609455 0.032767555 0.032926395 #>  [325] 0.033085978 0.033246309 0.033407389 0.033569223 0.033731814 0.033895164 #>  [331] 0.034059278 0.034224158 0.034389807 0.034556230 0.034723430 0.034891409 #>  [337] 0.035060171 0.035229719 0.035400058 0.035571189 0.035743118 0.035915846 #>  [343] 0.036089378 0.036263716 0.036438865 0.036614828 0.036791608 0.036969209 #>  [349] 0.037147634 0.037326887 0.037506972 0.037687891 0.037869648 0.038052247 #>  [355] 0.038235692 0.038419986 0.038605132 0.038791134 0.038977997 0.039165723 #>  [361] 0.039354316 0.039543780 0.039734118 0.039925334 0.040117432 0.040310415 #>  [367] 0.040504288 0.040699054 0.040894716 0.041091278 0.041288745 0.041487119 #>  [373] 0.041686405 0.041886607 0.042087728 0.042289772 0.042492743 0.042696644 #>  [379] 0.042901480 0.043107255 0.043313972 0.043521635 0.043730248 0.043939815 #>  [385] 0.044150341 0.044361828 0.044574280 0.044787703 0.045002099 0.045217473 #>  [391] 0.045433829 0.045651171 0.045869502 0.046088827 0.046309150 0.046530475 #>  [397] 0.046752805 0.046976146 0.047200500 0.047425873 0.047652268 0.047879690 #>  [403] 0.048108142 0.048337629 0.048568154 0.048799723 0.049032339 0.049266006 #>  [409] 0.049500729 0.049736512 0.049973358 0.050211273 0.050450261 0.050690325 #>  [415] 0.050931470 0.051173701 0.051417021 0.051661435 0.051906948 0.052153563 #>  [421] 0.052401285 0.052650118 0.052900067 0.053151136 0.053403330 0.053656652 #>  [427] 0.053911107 0.054166700 0.054423436 0.054681317 0.054940350 0.055200538 #>  [433] 0.055461886 0.055724398 0.055988079 0.056252934 0.056518966 0.056786181 #>  [439] 0.057054583 0.057324176 0.057594965 0.057866955 0.058140151 0.058414556 #>  [445] 0.058690175 0.058967013 0.059245076 0.059524366 0.059804889 0.060086650 #>  [451] 0.060369653 0.060653903 0.060939405 0.061226163 0.061514182 0.061803466 #>  [457] 0.062094021 0.062385851 0.062678961 0.062973356 0.063269040 0.063566018 #>  [463] 0.063864296 0.064163876 0.064464766 0.064766969 0.065070490 0.065375333 #>  [469] 0.065681505 0.065989009 0.066297851 0.066608036 0.066919567 0.067232451 #>  [475] 0.067546691 0.067862294 0.068179263 0.068497604 0.068817321 0.069138420 #>  [481] 0.069460906 0.069784783 0.070110056 0.070436731 0.070764812 0.071094304 #>  [487] 0.071425213 0.071757542 0.072091298 0.072426485 0.072763109 0.073101173 #>  [493] 0.073440684 0.073781647 0.074124065 0.074467945 0.074813292 0.075160109 #>  [499] 0.075508404 0.075858180 0.076209443 0.076562197 0.076916449 0.077272202 #>  [505] 0.077629463 0.077988235 0.078348525 0.078710337 0.079073677 0.079438549 #>  [511] 0.079804959 0.080172912 0.080542413 0.080913467 0.081286080 0.081660255 #>  [517] 0.082036000 0.082413318 0.082792215 0.083172696 0.083554767 0.083938432 #>  [523] 0.084323696 0.084710566 0.085099045 0.085489139 0.085880854 0.086274194 #>  [529] 0.086669166 0.087065772 0.087464020 0.087863915 0.088265461 0.088668663 #>  [535] 0.089073528 0.089480059 0.089888263 0.090298145 0.090709709 0.091122961 #>  [541] 0.091537906 0.091954550 0.092372897 0.092792953 0.093214723 0.093638212 #>  [547] 0.094063426 0.094490369 0.094919047 0.095349465 0.095781628 0.096215542 #>  [553] 0.096651211 0.097088641 0.097527837 0.097968804 0.098411548 0.098856073 #>  [559] 0.099302385 0.099750489 0.100200390 0.100652094 0.101105604 0.101560928 #>  [565] 0.102018069 0.102477033 0.102937826 0.103400451 0.103864916 0.104331223 #>  [571] 0.104799379 0.105269390 0.105741259 0.106214992 0.106690594 0.107168070 #>  [577] 0.107647426 0.108128667 0.108611797 0.109096821 0.109583745 0.110072574 #>  [583] 0.110563313 0.111055967 0.111550540 0.112047039 0.112545467 0.113045830 #>  [589] 0.113548133 0.114052381 0.114558579 0.115066732 0.115576845 0.116088922 #>  [595] 0.116602969 0.117118991 0.117636992 0.118156978 0.118678953 0.119202922 #>  [601] 0.119728890 0.120256862 0.120786843 0.121318838 0.121852851 0.122388887 #>  [607] 0.122926951 0.123467048 0.124009182 0.124553358 0.125099582 0.125647857 #>  [613] 0.126198188 0.126750580 0.127305038 0.127861566 0.128420169 0.128980852 #>  [619] 0.129543619 0.130108474 0.130675423 0.131244469 0.131815618 0.132388874 #>  [625] 0.132964240 0.133541723 0.134121325 0.134703052 0.135286908 0.135872897 #>  [631] 0.136461024 0.137051293 0.137643708 0.138238273 0.138834994 0.139433873 #>  [637] 0.140034916 0.140638126 0.141243507 0.141851065 0.142460802 0.143072723 #>  [643] 0.143686833 0.144303134 0.144921631 0.145542329 0.146165230 0.146790340 #>  [649] 0.147417661 0.148047198 0.148678955 0.149312935 0.149949142 0.150587580 #>  [655] 0.151228253 0.151871164 0.152516317 0.153163716 0.153813364 0.154465265 #>  [661] 0.155119423 0.155775840 0.156434521 0.157095469 0.157758687 0.158424179 #>  [667] 0.159091948 0.159761997 0.160434330 0.161108950 0.161785859 0.162465063 #>  [673] 0.163146562 0.163830361 0.164516463 0.165204870 0.165895586 0.166588614 #>  [679] 0.167283956 0.167981615 0.168681594 0.169383897 0.170088525 0.170795482 #>  [685] 0.171504770 0.172216392 0.172930350 0.173646647 0.174365286 0.175086268 #>  [691] 0.175809597 0.176535275 0.177263304 0.177993686 0.178726424 0.179461519 #>  [697] 0.180198975 0.180938793 0.181680975 0.182425524 0.183172441 0.183921727 #>  [703] 0.184673386 0.185427419 0.186183828 0.186942614 0.187703779 0.188467325 #>  [709] 0.189233254 0.190001566 0.190772264 0.191545349 0.192320822 0.193098684 #>  [715] 0.193878938 0.194661584 0.195446623 0.196234056 0.197023886 0.197816111 #>  [721] 0.198610735 0.199407757 0.200207178 0.201009000 0.201813222 0.202619846 #>  [727] 0.203428873 0.204240302 0.205054135 0.205870372 0.206689013 0.207510059 #>  [733] 0.208333509 0.209159365 0.209987627 0.210818293 0.211651366 0.212486844 #>  [739] 0.213324728 0.214165017 0.215007711 0.215852811 0.216700315 0.217550224 #>  [745] 0.218402536 0.219257252 0.220114371 0.220973892 0.221835815 0.222700139 #>  [751] 0.223566863 0.224435986 0.225307507 0.226181426 0.227057741 0.227936451 #>  [757] 0.228817554 0.229701051 0.230586939 0.231475217 0.232365883 0.233258936 #>  [763] 0.234154374 0.235052196 0.235952400 0.236854984 0.237759947 0.238667285 #>  [769] 0.239576998 0.240489083 0.241403538 0.242320361 0.243239549 0.244161101 #>  [775] 0.245085013 0.246011284 0.246939910 0.247870889 0.248804218 0.249739894 #>  [781] 0.250677916 0.251618278 0.252560980 0.253506017 0.254453386 0.255403084 #>  [787] 0.256355108 0.257309455 0.258266120 0.259225101 0.260186393 0.261149994 #>  [793] 0.262115899 0.263084104 0.264054606 0.265027401 0.266002483 0.266979851 #>  [799] 0.267959498 0.268941421 0.269925616 0.270912078 0.271900802 0.272891784 #>  [805] 0.273885019 0.274880502 0.275878229 0.276878195 0.277880394 0.278884822 #>  [811] 0.279891473 0.280900343 0.281911425 0.282924715 0.283940206 0.284957894 #>  [817] 0.285977773 0.286999837 0.288024081 0.289050497 0.290079082 0.291109827 #>  [823] 0.292142729 0.293177779 0.294214972 0.295254302 0.296295762 0.297339346 #>  [829] 0.298385046 0.299432858 0.300482772 0.301534784 0.302588886 0.303645070 #>  [835] 0.304703331 0.305763660 0.306826051 0.307890496 0.308956988 0.310025519 #>  [841] 0.311096082 0.312168669 0.313243273 0.314319886 0.315398500 0.316479106 #>  [847] 0.317561698 0.318646266 0.319732803 0.320821301 0.321911750 0.323004144 #>  [853] 0.324098472 0.325194727 0.326292901 0.327392983 0.328494966 0.329598840 #>  [859] 0.330704597 0.331812228 0.332921723 0.334033073 0.335146270 0.336261303 #>  [865] 0.337378163 0.338496841 0.339617327 0.340739612 0.341863685 0.342989537 #>  [871] 0.344117159 0.345246539 0.346377669 0.347510538 0.348645135 0.349781451 #>  [877] 0.350919476 0.352059198 0.353200607 0.354343694 0.355488446 0.356634854 #>  [883] 0.357782907 0.358932594 0.360083903 0.361236825 0.362391347 0.363547460 #>  [889] 0.364705151 0.365864409 0.367025223 0.368187582 0.369351474 0.370516888 #>  [895] 0.371683812 0.372852234 0.374022142 0.375193526 0.376366372 0.377540669 #>  [901] 0.378716405 0.379893568 0.381072145 0.382252125 0.383433495 0.384616244 #>  [907] 0.385800357 0.386985824 0.388172631 0.389360766 0.390550216 0.391740969 #>  [913] 0.392933012 0.394126332 0.395320915 0.396516750 0.397713823 0.398912121 #>  [919] 0.400111631 0.401312340 0.402514234 0.403717301 0.404921526 0.406126897 #>  [925] 0.407333400 0.408541022 0.409749748 0.410959566 0.412170462 0.413382421 #>  [931] 0.414595431 0.415809477 0.417024546 0.418240623 0.419457695 0.420675748 #>  [937] 0.421894767 0.423114739 0.424335649 0.425557483 0.426780227 0.428003867 #>  [943] 0.429228388 0.430453776 0.431680017 0.432907095 0.434134997 0.435363708 #>  [949] 0.436593214 0.437823499 0.439054550 0.440286351 0.441518888 0.442752145 #>  [955] 0.443986109 0.445220765 0.446456097 0.447692090 0.448928731 0.450166003 #>  [961] 0.451403891 0.452642382 0.453881459 0.455121108 0.456361313 0.457602059 #>  [967] 0.458843332 0.460085115 0.461327395 0.462570155 0.463813380 0.465057055 #>  [973] 0.466301165 0.467545694 0.468790627 0.470035948 0.471281643 0.472527696 #>  [979] 0.473774091 0.475020813 0.476267846 0.477515175 0.478762785 0.480010660 #>  [985] 0.481258784 0.482507142 0.483755719 0.485004498 0.486253465 0.487502604 #>  [991] 0.488751898 0.490001333 0.491250893 0.492500562 0.493750326 0.495000167 #>  [997] 0.496250070 0.497500021 0.498750003 0.500000000 0.501249997 0.502499979 #> [1003] 0.503749930 0.504999833 0.506249674 0.507499438 0.508749107 0.509998667 #> [1009] 0.511248102 0.512497396 0.513746535 0.514995502 0.516244281 0.517492858 #> [1015] 0.518741216 0.519989340 0.521237215 0.522484825 0.523732154 0.524979187 #> [1021] 0.526225909 0.527472304 0.528718357 0.529964052 0.531209373 0.532454306 #> [1027] 0.533698835 0.534942945 0.536186620 0.537429845 0.538672605 0.539914885 #> [1033] 0.541156668 0.542397941 0.543638687 0.544878892 0.546118541 0.547357618 #> [1039] 0.548596109 0.549833997 0.551071269 0.552307910 0.553543903 0.554779235 #> [1045] 0.556013891 0.557247855 0.558481112 0.559713649 0.560945450 0.562176501 #> [1051] 0.563406786 0.564636292 0.565865003 0.567092905 0.568319983 0.569546224 #> [1057] 0.570771612 0.571996133 0.573219773 0.574442517 0.575664351 0.576885261 #> [1063] 0.578105233 0.579324252 0.580542305 0.581759377 0.582975454 0.584190523 #> [1069] 0.585404569 0.586617579 0.587829538 0.589040434 0.590250252 0.591458978 #> [1075] 0.592666600 0.593873103 0.595078474 0.596282699 0.597485766 0.598687660 #> [1081] 0.599888369 0.601087879 0.602286177 0.603483250 0.604679085 0.605873668 #> [1087] 0.607066988 0.608259031 0.609449784 0.610639234 0.611827369 0.613014176 #> [1093] 0.614199643 0.615383756 0.616566505 0.617747875 0.618927855 0.620106432 #> [1099] 0.621283595 0.622459331 0.623633628 0.624806474 0.625977858 0.627147766 #> [1105] 0.628316188 0.629483112 0.630648526 0.631812418 0.632974777 0.634135591 #> [1111] 0.635294849 0.636452540 0.637608653 0.638763175 0.639916097 0.641067406 #> [1117] 0.642217093 0.643365146 0.644511554 0.645656306 0.646799393 0.647940802 #> [1123] 0.649080524 0.650218549 0.651354865 0.652489462 0.653622331 0.654753461 #> [1129] 0.655882841 0.657010463 0.658136315 0.659260388 0.660382673 0.661503159 #> [1135] 0.662621837 0.663738697 0.664853730 0.665966927 0.667078277 0.668187772 #> [1141] 0.669295403 0.670401160 0.671505034 0.672607017 0.673707099 0.674805273 #> [1147] 0.675901528 0.676995856 0.678088250 0.679178699 0.680267197 0.681353734 #> [1153] 0.682438302 0.683520894 0.684601500 0.685680114 0.686756727 0.687831331 #> [1159] 0.688903918 0.689974481 0.691043012 0.692109504 0.693173949 0.694236340 #> [1165] 0.695296669 0.696354930 0.697411114 0.698465216 0.699517228 0.700567142 #> [1171] 0.701614954 0.702660654 0.703704238 0.704745698 0.705785028 0.706822221 #> [1177] 0.707857271 0.708890173 0.709920918 0.710949503 0.711975919 0.713000163 #> [1183] 0.714022227 0.715042106 0.716059794 0.717075285 0.718088575 0.719099657 #> [1189] 0.720108527 0.721115178 0.722119606 0.723121805 0.724121771 0.725119498 #> [1195] 0.726114981 0.727108216 0.728099198 0.729087922 0.730074384 0.731058579 #> [1201] 0.732040502 0.733020149 0.733997517 0.734972599 0.735945394 0.736915896 #> [1207] 0.737884101 0.738850006 0.739813607 0.740774899 0.741733880 0.742690545 #> [1213] 0.743644892 0.744596916 0.745546614 0.746493983 0.747439020 0.748381722 #> [1219] 0.749322084 0.750260106 0.751195782 0.752129111 0.753060090 0.753988716 #> [1225] 0.754914987 0.755838899 0.756760451 0.757679639 0.758596462 0.759510917 #> [1231] 0.760423002 0.761332715 0.762240053 0.763145016 0.764047600 0.764947804 #> [1237] 0.765845626 0.766741064 0.767634117 0.768524783 0.769413061 0.770298949 #> [1243] 0.771182446 0.772063549 0.772942259 0.773818574 0.774692493 0.775564014 #> [1249] 0.776433137 0.777299861 0.778164185 0.779026108 0.779885629 0.780742748 #> [1255] 0.781597464 0.782449776 0.783299685 0.784147189 0.784992289 0.785834983 #> [1261] 0.786675272 0.787513156 0.788348634 0.789181707 0.790012373 0.790840635 #> [1267] 0.791666491 0.792489941 0.793310987 0.794129628 0.794945865 0.795759698 #> [1273] 0.796571127 0.797380154 0.798186778 0.798991000 0.799792822 0.800592243 #> [1279] 0.801389265 0.802183889 0.802976114 0.803765944 0.804553377 0.805338416 #> [1285] 0.806121062 0.806901316 0.807679178 0.808454651 0.809227736 0.809998434 #> [1291] 0.810766746 0.811532675 0.812296221 0.813057386 0.813816172 0.814572581 #> [1297] 0.815326614 0.816078273 0.816827559 0.817574476 0.818319025 0.819061207 #> [1303] 0.819801025 0.820538481 0.821273576 0.822006314 0.822736696 0.823464725 #> [1309] 0.824190403 0.824913732 0.825634714 0.826353353 0.827069650 0.827783608 #> [1315] 0.828495230 0.829204518 0.829911475 0.830616103 0.831318406 0.832018385 #> [1321] 0.832716044 0.833411386 0.834104414 0.834795130 0.835483537 0.836169639 #> [1327] 0.836853438 0.837534937 0.838214141 0.838891050 0.839565670 0.840238003 #> [1333] 0.840908052 0.841575821 0.842241313 0.842904531 0.843565479 0.844224160 #> [1339] 0.844880577 0.845534735 0.846186636 0.846836284 0.847483683 0.848128836 #> [1345] 0.848771747 0.849412420 0.850050858 0.850687065 0.851321045 0.851952802 #> [1351] 0.852582339 0.853209660 0.853834770 0.854457671 0.855078369 0.855696866 #> [1357] 0.856313167 0.856927277 0.857539198 0.858148935 0.858756493 0.859361874 #> [1363] 0.859965084 0.860566127 0.861165006 0.861761727 0.862356292 0.862948707 #> [1369] 0.863538976 0.864127103 0.864713092 0.865296948 0.865878675 0.866458277 #> [1375] 0.867035760 0.867611126 0.868184382 0.868755531 0.869324577 0.869891526 #> [1381] 0.870456381 0.871019148 0.871579831 0.872138434 0.872694962 0.873249420 #> [1387] 0.873801812 0.874352143 0.874900418 0.875446642 0.875990818 0.876532952 #> [1393] 0.877073049 0.877611113 0.878147149 0.878681162 0.879213157 0.879743138 #> [1399] 0.880271110 0.880797078 0.881321047 0.881843022 0.882363008 0.882881009 #> [1405] 0.883397031 0.883911078 0.884423155 0.884933268 0.885441421 0.885947619 #> [1411] 0.886451867 0.886954170 0.887454533 0.887952961 0.888449460 0.888944033 #> [1417] 0.889436687 0.889927426 0.890416255 0.890903179 0.891388203 0.891871333 #> [1423] 0.892352574 0.892831930 0.893309406 0.893785008 0.894258741 0.894730610 #> [1429] 0.895200621 0.895668777 0.896135084 0.896599549 0.897062174 0.897522967 #> [1435] 0.897981931 0.898439072 0.898894396 0.899347906 0.899799610 0.900249511 #> [1441] 0.900697615 0.901143927 0.901588452 0.902031196 0.902472163 0.902911359 #> [1447] 0.903348789 0.903784458 0.904218372 0.904650535 0.905080953 0.905509631 #> [1453] 0.905936574 0.906361788 0.906785277 0.907207047 0.907627103 0.908045450 #> [1459] 0.908462094 0.908877039 0.909290291 0.909701855 0.910111737 0.910519941 #> [1465] 0.910926472 0.911331337 0.911734539 0.912136085 0.912535980 0.912934228 #> [1471] 0.913330834 0.913725806 0.914119146 0.914510861 0.914900955 0.915289434 #> [1477] 0.915676304 0.916061568 0.916445233 0.916827304 0.917207785 0.917586682 #> [1483] 0.917964000 0.918339745 0.918713920 0.919086533 0.919457587 0.919827088 #> [1489] 0.920195041 0.920561451 0.920926323 0.921289663 0.921651475 0.922011765 #> [1495] 0.922370537 0.922727798 0.923083551 0.923437803 0.923790557 0.924141820 #> [1501] 0.924491596 0.924839891 0.925186708 0.925532055 0.925875935 0.926218353 #> [1507] 0.926559316 0.926898827 0.927236891 0.927573515 0.927908702 0.928242458 #> [1513] 0.928574787 0.928905696 0.929235188 0.929563269 0.929889944 0.930215217 #> [1519] 0.930539094 0.930861580 0.931182679 0.931502396 0.931820737 0.932137706 #> [1525] 0.932453309 0.932767549 0.933080433 0.933391964 0.933702149 0.934010991 #> [1531] 0.934318495 0.934624667 0.934929510 0.935233031 0.935535234 0.935836124 #> [1537] 0.936135704 0.936433982 0.936730960 0.937026644 0.937321039 0.937614149 #> [1543] 0.937905979 0.938196534 0.938485818 0.938773837 0.939060595 0.939346097 #> [1549] 0.939630347 0.939913350 0.940195111 0.940475634 0.940754924 0.941032987 #> [1555] 0.941309825 0.941585444 0.941859849 0.942133045 0.942405035 0.942675824 #> [1561] 0.942945417 0.943213819 0.943481034 0.943747066 0.944011921 0.944275602 #> [1567] 0.944538114 0.944799462 0.945059650 0.945318683 0.945576564 0.945833300 #> [1573] 0.946088893 0.946343348 0.946596670 0.946848864 0.947099933 0.947349882 #> [1579] 0.947598715 0.947846437 0.948093052 0.948338565 0.948582979 0.948826299 #> [1585] 0.949068530 0.949309675 0.949549739 0.949788727 0.950026642 0.950263488 #> [1591] 0.950499271 0.950733994 0.950967661 0.951200277 0.951431846 0.951662371 #> [1597] 0.951891858 0.952120310 0.952347732 0.952574127 0.952799500 0.953023854 #> [1603] 0.953247195 0.953469525 0.953690850 0.953911173 0.954130498 0.954348829 #> [1609] 0.954566171 0.954782527 0.954997901 0.955212297 0.955425720 0.955638172 #> [1615] 0.955849659 0.956060185 0.956269752 0.956478365 0.956686028 0.956892745 #> [1621] 0.957098520 0.957303356 0.957507257 0.957710228 0.957912272 0.958113393 #> [1627] 0.958313595 0.958512881 0.958711255 0.958908722 0.959105284 0.959300946 #> [1633] 0.959495712 0.959689585 0.959882568 0.960074666 0.960265882 0.960456220 #> [1639] 0.960645684 0.960834277 0.961022003 0.961208866 0.961394868 0.961580014 #> [1645] 0.961764308 0.961947753 0.962130352 0.962312109 0.962493028 0.962673113 #> [1651] 0.962852366 0.963030791 0.963208392 0.963385172 0.963561135 0.963736284 #> [1657] 0.963910622 0.964084154 0.964256882 0.964428811 0.964599942 0.964770281 #> [1663] 0.964939829 0.965108591 0.965276570 0.965443770 0.965610193 0.965775842 #> [1669] 0.965940722 0.966104836 0.966268186 0.966430777 0.966592611 0.966753691 #> [1675] 0.966914022 0.967073605 0.967232445 0.967390545 0.967547907 0.967704535 #> [1681] 0.967860433 0.968015603 0.968170048 0.968323772 0.968476777 0.968629068 #> [1687] 0.968780646 0.968931516 0.969081680 0.969231141 0.969379902 0.969527967 #> [1693] 0.969675338 0.969822019 0.969968012 0.970113320 0.970257947 0.970401896 #> [1699] 0.970545169 0.970687769 0.970829700 0.970970964 0.971111565 0.971251504 #> [1705] 0.971390786 0.971529412 0.971667387 0.971804712 0.971941391 0.972077426 #> [1711] 0.972212821 0.972347578 0.972481699 0.972615189 0.972748049 0.972880283 #> [1717] 0.973011893 0.973142881 0.973273252 0.973403006 0.973532148 0.973660680 #> [1723] 0.973788605 0.973915925 0.974042643 0.974168761 0.974294284 0.974419212 #> [1729] 0.974543549 0.974667297 0.974790459 0.974913038 0.975035036 0.975156456 #> [1735] 0.975277300 0.975397572 0.975517273 0.975636406 0.975754974 0.975872979 #> [1741] 0.975990423 0.976107311 0.976223643 0.976339422 0.976454651 0.976569332 #> [1747] 0.976683468 0.976797062 0.976910115 0.977022630 0.977134610 0.977246057 #> [1753] 0.977356973 0.977467361 0.977577223 0.977686561 0.977795379 0.977903678 #> [1759] 0.978011460 0.978118729 0.978225486 0.978331734 0.978437474 0.978542710 #> [1765] 0.978647444 0.978751677 0.978855413 0.978958653 0.979061400 0.979163655 #> [1771] 0.979265422 0.979366703 0.979467499 0.979567813 0.979667647 0.979767003 #> [1777] 0.979865884 0.979964291 0.980062227 0.980159694 0.980256695 0.980353230 #> [1783] 0.980449303 0.980544915 0.980640070 0.980734767 0.980829011 0.980922803 #> [1789] 0.981016144 0.981109038 0.981201486 0.981293490 0.981385052 0.981476175 #> [1795] 0.981566860 0.981657109 0.981746925 0.981836309 0.981925263 0.982013790 #> [1801] 0.982101891 0.982189568 0.982276824 0.982363660 0.982450078 0.982536080 #> [1807] 0.982621668 0.982706843 0.982791609 0.982875967 0.982959918 0.983043464 #> [1813] 0.983126609 0.983209352 0.983291696 0.983373644 0.983455196 0.983536355 #> [1819] 0.983617123 0.983697501 0.983777491 0.983857095 0.983936314 0.984015152 #> [1825] 0.984093608 0.984171686 0.984249387 0.984326712 0.984403664 0.984480243 #> [1831] 0.984556453 0.984632294 0.984707769 0.984782879 0.984857625 0.984932010 #> [1837] 0.985006035 0.985079702 0.985153013 0.985225968 0.985298571 0.985370822 #> [1843] 0.985442723 0.985514276 0.985585482 0.985656344 0.985726862 0.985797039 #> [1849] 0.985866875 0.985936373 0.986005534 0.986074360 0.986142852 0.986211011 #> [1855] 0.986278841 0.986346341 0.986413514 0.986480360 0.986546883 0.986613082 #> [1861] 0.986678960 0.986744519 0.986809759 0.986874682 0.986939289 0.987003583 #> [1867] 0.987067565 0.987131236 0.987194597 0.987257651 0.987320397 0.987382839 #> [1873] 0.987444978 0.987506814 0.987568349 0.987629585 0.987690523 0.987751165 #> [1879] 0.987811512 0.987871565 0.987931326 0.987990796 0.988049976 0.988108868 #> [1885] 0.988167474 0.988225794 0.988283830 0.988341583 0.988399055 0.988456248 #> [1891] 0.988513161 0.988569797 0.988626157 0.988682242 0.988738054 0.988793594 #> [1897] 0.988848863 0.988903862 0.988958593 0.989013057 0.989067256 0.989121190 #> [1903] 0.989174861 0.989228270 0.989281418 0.989334307 0.989386938 0.989439312 #> [1909] 0.989491430 0.989543294 0.989594904 0.989646262 0.989697370 0.989748228 #> [1915] 0.989798837 0.989849199 0.989899315 0.989949186 0.989998813 0.990048198 #> [1921] 0.990097341 0.990146244 0.990194908 0.990243334 0.990291524 0.990339477 #> [1927] 0.990387196 0.990434681 0.990481934 0.990528956 0.990575748 0.990622311 #> [1933] 0.990668646 0.990714754 0.990760637 0.990806295 0.990851729 0.990896941 #> [1939] 0.990941931 0.990986701 0.991031252 0.991075585 0.991119700 0.991163600 #> [1945] 0.991207284 0.991250754 0.991294011 0.991337056 0.991379890 0.991422515 #> [1951] 0.991464930 0.991507137 0.991549138 0.991590932 0.991632521 0.991673907 #> [1957] 0.991715089 0.991756070 0.991796849 0.991837429 0.991877809 0.991917991 #> [1963] 0.991957976 0.991997765 0.992037359 0.992076758 0.992115964 0.992154977 #> [1969] 0.992193799 0.992232430 0.992270871 0.992309124 0.992347189 0.992385067 #> [1975] 0.992422759 0.992460265 0.992497588 0.992534727 0.992571684 0.992608459 #> [1981] 0.992645053 0.992681467 0.992717703 0.992753760 0.992789641 0.992825344 #> [1987] 0.992860873 0.992896226 0.992931406 0.992966413 0.993001247 0.993035911 #> [1993] 0.993070404 0.993104727 0.993138881 0.993172868 0.993206687 0.993240339 #> [1999] 0.993273827 0.993307149 par(mfrow = c(2, 2)) plot(   1:2000, weight_transcripts(1:2000, type = 'sigmoid'),   type = 'l', xlab = 'Read counts', ylab = 'Sigmoid weight' ) plot(   1:2000, weight_transcripts(1:2000, type = 'counts'),   type = 'l', xlab = 'Read counts', ylab = 'Weight by counts' ) plot(   1:2000, weight_transcripts(1:2000, type = 'equal'),   type = 'l', xlab = 'Read counts', ylab = 'Equal weights' )"}]
